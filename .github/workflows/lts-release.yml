name: Create LTS Versions

on:
  schedule:
    - cron: '0 0 1,16 * *'

jobs:
  lts_needed:
    name: Check for Diff Between Main and the Last LTS Version
    runs-on: ubuntu-latest
    outputs:
      no_release: ${{ steps.get_releases.outputs.no_release }}
      new_lts_zip: ${{ steps.get_releases.outputs.new_lts_zip }}
      release_name: ${{ steps.get_releases.outputs.release_name }}
    steps:
      - name: Get Releases
        id: get_releases
        run: |
          LTS_TIME=$(jq -r 'first(.[] | select(.name | match(".+LTS")) | .published_at)' <<< $(curl -Ls -H "Accept: application/vnd.github+json" -H "Authorization: token $TOKEN" $GITHUB_API_URL/repos/$GITHUB_REPOSITORY/releases)) # Get latest LTS version release time
          read REL_TIME REL_ID REL_NAME REL_ZIP < <(echo $(curl -Ls -H "Accept: application/vnd.github+json" -H "Authorization: token $TOKEN" $GITHUB_API_URL/repos/$GITHUB_REPOSITORY/releases/latest | jq -r '.published_at, .id, .name, .zipball_url'))  # Get info about latest release
          if [ $REL_TIME '>' $LTS_TIME ]; then curl -s -X PATCH -H "Accept: application/vnd.github+json" -H "Authorization: token $TOKEN" $GITHUB_API_URL/repos/$GITHUB_REPOSITORY/releases/$REL_ID -d '{"name":"'"${REL_NAME}-LTS"'"}' > /dev/null; echo "new_lts_zip=$REL_ZIP" >> $GITHUB_OUTPUT; echo "release_name=$REL_NAME" >> $GITHUB_OUTPUT; else echo "no_release=true" >> $GITHUB_OUTPUT; fi # If there has been a non-LTS release since the last LTS release, create a new LTS release
        env:
          TOKEN: ${{ secrets.DX_GITHUB_TOKEN }}
  
  create_lts:
    name: Create A New LTS Release
    runs-on: ubuntu-latest
    needs: lts_needed
    if: ${{!needs.lts_needed.outputs.no_release}}
    steps:
      - name: Download, Extract, and Build Site from Release
        run: |
          mkdir lts; curl -Lfs -H "Accept: application/vnd.github+json" -H "Authorization: token $TOKEN" $LTS_ZIP --output lts.zip; unzip -q lts.zip -d lts # Get and Unzip Release Archive
          cd $(find ./ -type d -name "site"); mv ./* ../../; cd ../../  # Move contents of site directory to root of unzipped folder
          tmpfile=$(mktemp); cp custom.config.json $tmpfile; jq "(.[] | select(.)) |= gsub(\"main\"; \"$REL_NAME\")" $tmpfile > custom.config.json; rm -f -- "$tmpfile"  # Update Config for Spec Download Links
          yarn install --pure-lockfile; yarn build  # Install Packages and Build Static Site
        env:
          TOKEN: ${{ secrets.DX_GITHUB_TOKEN }}
          LTS_ZIP: ${{ needs.lts_needed.outputs.new_lts_zip }}
          REL_NAME: ${{ needs.lts_needed.outputs.release_name }}

      - name: Update Bucket Name
        id: bucket_name
        run: |
          BUCKET_NAME=$(echo "bandwidth-api-docs-${BUCKET_NAME}" | tr '[:upper:]' '[:lower:]' | sed -e "s/[^a-z0-9]/-/g") #convert to lowercase and convert non-alphanumerics with dashes
          echo "bucket_name=$BUCKET_NAME" >> $GITHUB_OUTPUT
        env:
          BUCKET_NAME: ${{ needs.lts_needed.outputs.release_name }}

      - name: Sync to S3
        uses: Bandwidth/s3-sync-action@v1.3.0
        with:
          bucket-name: ${{ steps.bucket_name.outputs.bucket_name }}
          bucket-expiration: '180'
          bucket-region: 'us-east-1'
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          content-path: ./lts/build

  update_lts_table:
    name: Automatically update the LTS table
    runs-on: ubuntu-latest
    needs: [lts_needed, create_lts]
    if: ${{!needs.lts_needed.outputs.no_release}}
    steps:
      - name: Get Latest LTS Releases and Update the LTS config file
        run: |
          cat > lts.config.json <<< $(jq -r '[nth(0,1,2,3,4,5,6,7,8,9,10,11;.[] | select(.name | match(".+LTS")) | .name | rtrimstr("-LTS"))] | unique | reverse' <<< $(curl -Ls -H "Accept: application/vnd.github+json" -H "Authorization: token $GITHUB_TOKEN" https://api.github.com/repos/Bandwidth/api-docs/releases))
        env:
          TOKEN: ${{ secrets.DX_GITHUB_TOKEN }}

      - name: Create Pull Request
        id: lts-pr
        uses: peter-evans/create-pull-request@v4
        with:
          token: ${{ secrets.DX_GITHUB_TOKEN }}
          commit-message: Updating LTS Versions
          committer: GitHub <noreply@github.com>
          author: ${{ github.actor }} <${{ github.actor }}@users.noreply.github.com>
          branch: Auto-Update-LTS
          delete-branch: true
          title: 'Updating LTS Versions'
          body: |
            - Auto-generated for LTS Version Update Workflow
          labels: |
            automated pr
          draft: false
        env: 
          GITHUB_TOKEN: ${{ secrets.DX_GITHUB_TOKEN }}     
