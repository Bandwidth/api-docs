---
openapi: 3.0.0
info:
  title: TitleGoesHere #Replace this with your service name
  description: Description goes here #Replace this with your service description
  version: 1.0.0
  x-server-configuration: #This is a custom addition for APIMatic
    default-environment: production
    default-server: default
    environments:
    - name: production
      servers:
      - name: default
        url: https://service-url.com #Replace this with your service base URL
    - name: custom
      servers:
      - name: default
        url: "{base_url}"
    parameters:
    - name: base_url
      description: ''
      type: string
      example: https://www.example.com
servers:
- url: https://service-url.com #Replace this with your service base URL. Should match the value above
  variables: {}
paths:
  "/path/{variableOne}/pathExtension/{variableTwo}": #Replace this with your service path. URL variables
       #if needed are wrapped with the brackets { }.
    get:
      tags:
      - service #Tags are optional. Include if you want to bundle your operations together.
      summary: Description goes here #Replace this with a short summary.
      description: Description goes here if you need more detailed information #Replace this with a longer more detailed summary.
      operationId: OperationId #Replace this with a reasonable identifier for this operation.
       #If you're following the model based API design, this should
       #be <Create|Retrieve|Update|Delete><ModelObject> ex: CreateMessage.
       #If you're following the functional based API design, this should
       #be <Verb><Subject> ex: SendMessage.
      parameters:
       #Every URL parameter needs to be included in this section, must be defined
       #in the same order as they are listed in the path, must be required (required: true), and
       #must be defined as in the path (in: path).
      - name: variableOne #Replace this with a reasonable variable name.
        in: path
        required: true
        description: Description goes here #Replace this with a reasonable description.
        schema:
          type: string #Typically you will want a variable type of string, but other types
            #defined at https://swagger.io/docs/specification/data-models/data-types/ may
            #be used as well.
            #Enums, format types, and other schema restrictions are not recommended to define in the spec.
        example: 'Example value' #Replace this with a reasonable example value. Note that the
            #type must match the schema.
      - name: variableTwo 
        in: path
        required: true
        description: Description goes here
        schema:
          type: string 
        example: 'Example value'
        #Other parameters (query, header, and cookie) are defined in the same manner
        #with the `in` keyword defining where they go.
        #Docs can be found at https://swagger.io/docs/specification/describing-parameters/.
        #Take note that auth headers are NOT defined in the specific endpoints. Those should be globally defined.
      responses:
        '200':
          description: Description goes here #Replace this with what the response means.
          #Responses include both headers and content.
          #Docs can be found at https://swagger.io/docs/specification/describing-responses/
          headers:
            #Headers should be defined in the same manner as parameter headers
            MyHeader:
              description: Header description #Replace with your description 
              schema:
                type: string
          content:
            #Typically the content section will be used to define your JSON response body.
            #Defining the body in line is not recommended. Instead a reference (`$ref`) should
            #be used to point to a reusable schema. This is recommended because any model based API
            #will most likely use the same model in more than 1 place.
            #If you need to define multiple response schemas, maybe you should look into having
            #a different operation.
            application/json:
              schema:
                "$ref": "#/components/schemas/MySchema"
        '204':
          #Empty responses just omit the content block
          description: Empty response
         #Error responses such as 400, 401, 403, 404, 429 are defined below in the exact same
         #manner as success responses. It is highly recommended to use a common error object.
         #If you want to generalize responses to a certain range of error codes, you can use
         #1XX, 2XX, 3XX, 4XX, or 5XX to bucket your responses
        '5XX':
          description: All server errors defined here
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ApiError"
    post:
      tags:
      - service
      summary: Description goes here
      operationId: OperationId 
      parameters:
        #Unfortunately URL parameters must be re-defined for different HTTP methods under the same path
      - name: variableOne
        in: path
        required: true
        description: Description goes here
        schema:
          type: string 
        example: 'Example value'
      - name: variableTwo 
        in: path
        required: true
        description: Description goes here
        schema:
          type: string 
        example: 'Example value'
      requestBody:
        content:
          #The requestBody definition is very similar to the response body definition, and should follow the same rules.
          application/json:
            schema:
              "$ref": "#/components/schemas/MySchema"
        required: true #This should be explicitly added for required request bodies.
      callbacks:
        #Optional definition for callbacks. This generally follows the same rules as request and response bodies.
        #Docs can be found at https://swagger.io/docs/specification/callbacks/.
        myEvent: #Replace with your event name
          '{$request.body#/variableOne}': #The callback URL
            post:
              requestBody:
                content:
                  application/json:
                    schema:
                      "$ref": "#/components/schemas/MySchema"
              responses: #Use this if you expect a response from the server
                '200':
                  description: Response received
      responses:
        '200':
          description: Description goes here 
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/MySchema"
components:
  schemas:
    MySchema:
      title: MySchema
      type: object
      properties:
        variableOne:
          type: string
          description: Field description
        variableTwo:
          type: integer
          description: Field description
    ApiError:
      title: MyErrorSchema
      type: object
      properties:
        type:
          type: string
          description: Unique identifier of the error type 
        description:
          type: string
          description: Human readable error description
  securitySchemes: #This schema definition is required for basic auth. Other types of definitions can be found at https://swagger.io/docs/specification/authentication/
    httpBasic:
      type: http
      scheme: basic
security: #Security defined here; use the same name as the securitySchemes name
- httpBasic: []
tags: [] #Optional tags
