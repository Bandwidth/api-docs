{
    "openapi": "3.0.2",
    "info": {
        "version": "1.0.5",
        "title": "WebRtc",
        "description": "Bandwidth WebRTC API\n## Base Path\n<code>https://api.webrtc.bandwidth.com/v1</code?",
        "contact": {
            "name": "Bandwidth Edge Services",
            "email": "edge-services@bandwidth.com",
            "url": "https://support.bandwidth.com"
        },
        "x-server-configuration": {
            "default-environment": "production",
            "default-server": "default",
            "environments": [
                {
                    "name": "production",
                    "servers": [
                        {
                            "name": "default",
                            "url": "https://api.webrtc.bandwidth.com/v1"
                        }
                    ]
                },
                {
                    "name": "custom",
                    "servers": [
                        {
                            "name": "default",
                            "url": "{base_url}"
                        }
                    ]
                }
            ],
            "parameters": [
                {
                    "name": "base_url",
                    "description": "",
                    "type": "string",
                    "example": "https://www.example.com"
                }
            ]
        }
    },
    "servers": [
        {
            "url": "https://api.webrtc.bandwidth.com/v1",
            "description": "Production WebRTC APIs"
        }
    ],
    "paths": {
        "/accounts/{accountId}/participants": {
            "post": {
                "tags": [
                    "Participants"
                ],
                "summary": "Create Participant",
                "description": "Create a new participant under this account.\n\nParticipants are idempotent, so relevant parameters must be set in this function if desired.\n",
                "operationId": "createParticipant",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Account ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Participant parameters",
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateParticipantRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreateParticipantResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Access Denied"
                    },
                    "default": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "source": "curl 'https://api.webrtc.bandwidth.com/v1/accounts/12345/participants' \\\n    -X POST \\\n    -H 'Authorization: Basic dXNlcm5hbWU6cGFzc3dvcmQ=' \\\n    -H 'Content-Type: application/json' \\\n    -d '{\n        \"callbackUrl\": \"https://example.com/callback\",\n        \"publishPermissions\": [\n            \"VIDEO\",\n            \"AUDIO\"\n        ],\n        \"tag\": \"participant1\",\n        \"deviceApiVersion\": \"V3\"\n    }'\n"
                    },
                    {
                        "lang": "C#",
                        "source": "ï»¿using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing Bandwidth.Standard;\nusing Bandwidth.Standard.Exceptions;\nusing Bandwidth.Standard.WebRtc.Models;\n\nclass Program\n{\n    static async Task Main(string[] args)\n    {\n        var username = \"api-username\";\n        var password = \"api-pasword\";\n        var accountId = \"12345\";\n\n        var client = new BandwidthClient.Builder()\n            .WebRtcBasicAuthCredentials(username, password)\n            .Build();\n\n        var participant = new Participant()\n        {\n            PublishPermissions = new List<PublishPermissionEnum>() { PublishPermissionEnum.AUDIO, PublishPermissionEnum.VIDEO }\n        };\n\n        try\n        {\n            var response = await client.WebRtc.APIController.CreateParticipantAsync(accountId, participant);\n            Console.WriteLine(response.Data);\n        }\n        catch (ApiException e)\n        {\n            Console.WriteLine(e.Message);\n        }\n    }\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import com.bandwidth.BandwidthClient;\nimport com.bandwidth.http.response.ApiResponse;\nimport com.bandwidth.webrtc.models.AccountsParticipantsResponse;\nimport com.bandwidth.webrtc.models.Participant;\nimport com.bandwidth.webrtc.models.PublishPermissionEnum;\n\nimport java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.ExecutionException;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class Sample {\n    public static final String USERNAME = \"api-username\";\n    public static final String PASSWORD = \"api-password\";\n    public static final String ACCOUNT_ID = \"12345\";\n\n    public static void main(String[] args) {\n        BandwidthClient client = new BandwidthClient.Builder()\n                .webRtcBasicAuthCredentials(USERNAME, PASSWORD)\n                .build();\n\n        Participant participant = new Participant();\n        List<PublishPermissionEnum> publishPermissions = Arrays.asList(PublishPermissionEnum.AUDIO, PublishPermissionEnum.VIDEO);\n        participant.setPublishPermissions(publishPermissions);\n\n        try {\n            CompletableFuture<ApiResponse<AccountsParticipantsResponse>> completableFuture = client.getWebRtcClient().getAPIController().createParticipantAsync(ACCOUNT_ID, participant);\n        } catch (Exception ex) {\n            System.out.println(ex.getMessage());\n        }\n    }\n}\n"
                    },
                    {
                        "lang": "Node.js",
                        "source": "import { Client, ApiController } from '@bandwidth/webrtc';\n\nconst BW_USERNAME = \"api-username\";\nconst BW_PASSWORD = \"api-password\";\nconst BW_ACCOUNT_ID = \"12345\";\n\nconst client = new Client({\n  basicAuthUserName: BW_USERNAME,\n  basicAuthPassword: BW_PASSWORD\n});\n\nconst controller = new ApiController(client);\n\nconst accountId = BW_ACCOUNT_ID;\n\nconst createParticipant = async function() {\n  try {\n    const response = await controller.createParticipant(accountId, {\n      callbackUrl: \"http://www.myapp.com/new\",\n      publishPermissions: [\"AUDIO\"]\n    })\n    console.log(response.body);\n  } catch(error) {\n    console.error(error);\n  }\n}\n\ncreateParticipant();\n"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n  \nrequire \"vendor/autoload.php\";\n\napi-username = \"api-username\";\napi-password = \"api-pasword\";\n12345 = \"12345\";\n\n$config = new BandwidthLib\\Configuration(\n    array(\n        'webRtcBasicAuthUserName' => $BW_USERNAME,\n        'webRtcBasicAuthPassword' => $BW_PASSWORD,\n    )\n);\n$client = new BandwidthLib\\BandwidthClient($config);\n\n$webRtcClient = $client->getWebRtc()->getClient();\n\n$body = new BandwidthLib\\WebRtc\\Models\\Participant();\n$body->publishPermissions = array(\"AUDIO\", \"VIDEO\");\n$body->deviceApiVersion = \"V3\";\n\ntry {\n    $response = $webRtcClient->createParticipant($BW_ACCOUNT_ID, $body);\n    print_r($response->getResult()->participant->id);\n} catch (BandwidthLib\\APIException $e) {\n    print_r($e->getResponseCode());\n}\n"
                    },
                    {
                        "lang": "Python",
                        "source": "from bandwidth.bandwidth_client import BandwidthClient\nfrom bandwidth.exceptions.api_exception import APIException\nfrom bandwidth.webrtc.models.participant import Participant\n\nimport os\n\nBW_USERNAME = \"api-username\"\nBW_PASSWORD = \"api-password\"\nBW_ACCOUNT_ID = \"12345\"\n\nbandwidth_client = BandwidthClient(\n    web_rtc_basic_auth_user_name=BW_USERNAME,\n    web_rtc_basic_auth_password=BW_PASSWORD\n)\n\nweb_rtc_client = bandwidth_client.web_rtc_client.client\n\nbody = Participant()\nbody.publish_permissions = [\"AUDIO\", \"VIDEO\"]\nbody.device_api_version = \"V3\"\n\ntry:\n    response = web_rtc_client.create_participant(BW_ACCOUNT_ID, body)\n    print(response.body.participant.id)\nexcept APIException as e:\n    print(e.response_code)\n"
                    },
                    {
                        "lang": "Ruby",
                        "source": "require 'bandwidth'\n\ninclude Bandwidth\ninclude Bandwidth::WebRtc\n\nBW_USERNAME = \"api-username\"\nBW_PASSWORD = \"api-password\"\nBW_ACCOUNT_ID = \"12345\"\n\nbandwidth_client = Bandwidth::Client.new(\n    web_rtc_basic_auth_user_name: BW_USERNAME,\n    web_rtc_basic_auth_password: BW_PASSWORD\n)\n\nweb_rtc_client = bandwidth_client.web_rtc_client.client\n\nbody = Participant.new\nbody.publish_permissions = [\"AUDIO\", \"VIDEO\"]\nbody.device_api_version = \"V3\"\n\nbegin\n    response = web_rtc_client.create_participant(BW_ACCOUNT_ID, :body => body)\n    puts response.data.participant.id\nrescue APIException => e\n    puts e.response_code\nend\n"
                    }
                ]
            }
        },
        "/accounts/{accountId}/participants/{participantId}": {
            "get": {
                "tags": [
                    "Participants"
                ],
                "summary": "Get Participant",
                "description": "Get participant by ID.",
                "operationId": "getParticipant",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Account ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "participantId",
                        "in": "path",
                        "description": "Participant ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Participant"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Access Denied"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "default": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "source": "curl 'https://api.webrtc.bandwidth.com/v1/accounts/12345/participants/320e2af6-13ec-498d-8b51-daba52c37853' \\\n    -H 'Authorization: Basic dXNlcm5hbWU6cGFzc3dvcmQ='\n"
                    },
                    {
                        "lang": "C#",
                        "source": "using System;\nusing System.Threading.Tasks;\nusing Bandwidth.Standard;\nusing Bandwidth.Standard.Exceptions;\nusing Bandwidth.Standard.WebRtc.Models;\n\nclass Program\n{\n    static async Task Main(string[] args)\n    {\n        var username = \"api-username\";\n        var password = \"api-pasword\";\n        var accountId = \"12345\";\n\n        var participantId = \"320e2af6-13ec-498d-8b51-daba52c37853\";\n\n        var client = new BandwidthClient.Builder()\n            .WebRtcBasicAuthCredentials(username, password)\n            .Build();\n\n        try\n        {\n            var response = await client.WebRtc.APIController.GetParticipantAsync(accountId, participantId);\n            Console.WriteLine(response.Data);\n        }\n        catch (ApiException e)\n        {\n            Console.WriteLine(e.Message);\n        }\n    }\n}"
                    },
                    {
                        "lang": "Java",
                        "source": "import com.bandwidth.BandwidthClient;\nimport com.bandwidth.http.response.ApiResponse;\nimport com.bandwidth.webrtc.models.Participant;\n\nimport java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.ExecutionException;\n\npublic class Sample {\n    public static final String USERNAME = \"api-username\";\n    public static final String PASSWORD = \"api-password\";\n    public static final String ACCOUNT_ID = \"12345\";\n\n    public static void main(String[] args) {\n        String participantId = \"568749d5-04d5-483d-adf5-deac7dd3d521\";\n\n        BandwidthClient client = new BandwidthClient.Builder()\n                .webRtcBasicAuthCredentials(USERNAME, PASSWORD)\n                .build();\n\n        try {\n            CompletableFuture<ApiResponse<Participant>> completableFuture = client.getWebRtcClient().getAPIController().getParticipantAsync(ACCOUNT_ID, participantId);\n            System.out.println(completableFuture.get().getResult());\n        } catch (InterruptedException | ExecutionException e) {\n            System.out.println(e.getMessage());\n        }\n    }\n}\n"
                    },
                    {
                        "lang": "Node.js",
                        "source": "import { Client, ApiController } from '@bandwidth/webrtc';\n\nconst BW_USERNAME = \"api-username\";\nconst BW_PASSWORD = \"api-password\";\nconst BW_ACCOUNT_ID = \"12345\";\n\nconst client = new Client({\n  basicAuthUserName: BW_USERNAME,\n  basicAuthPassword: BW_PASSWORD\n});\n\nconst controller = new ApiController(client);\n\nconst accountId = BW_ACCOUNT_ID;\nconst participantId = \"320e2af6-13ec-498d-8b51-daba52c37853\"\n\nconst getParticipant = async function() {\n  try {\n    const response = await controller.getParticipant(accountId, participantId)\n    console.log(response.body);\n  } catch(error) {\n    console.error(error);\n  }\n}\n\ngetParticipant();\n"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n  \nrequire \"vendor/autoload.php\";\n\napi-username = \"api-username\";\napi-password = \"api-pasword\";\n12345 = \"12345\";\n\n$config = new BandwidthLib\\Configuration(\n    array(\n        'webRtcBasicAuthUserName' => $BW_USERNAME,\n        'webRtcBasicAuthPassword' => $BW_PASSWORD,\n    )\n);\n$client = new BandwidthLib\\BandwidthClient($config);\n\n$webRtcClient = $client->getWebRtc()->getClient();\n\n$participantId = \"1234-qwer\";\n\ntry {\n    $response = $webRtcClient->getParticipant($BW_ACCOUNT_ID, $participantId);\n    print_r($response->getResult()->id);\n} catch (BandwidthLib\\APIException $e) {\n    print_r($e->getResponseCode());\n}\n"
                    },
                    {
                        "lang": "Python",
                        "source": "from bandwidth.bandwidth_client import BandwidthClient\nfrom bandwidth.exceptions.api_exception import APIException\n\nimport os\n\nBW_USERNAME = \"api-username\"\nBW_PASSWORD = \"api-password\"\nBW_ACCOUNT_ID = \"12345\"\n\nbandwidth_client = BandwidthClient(\n    web_rtc_basic_auth_user_name=BW_USERNAME,\n    web_rtc_basic_auth_password=BW_PASSWORD\n)\n\nweb_rtc_client = bandwidth_client.web_rtc_client.client\n\nparticipant_id = \"1234-abcd\"\n\ntry:\n    response = web_rtc_client.get_participant(BW_ACCOUNT_ID, participant_id)\n    print(response.body.id)\nexcept APIException as e:\n    print(e.response_code)\n"
                    },
                    {
                        "lang": "Ruby",
                        "source": "require 'bandwidth'\n\ninclude Bandwidth\ninclude Bandwidth::WebRtc\n\nBW_USERNAME = \"api-username\"\nBW_PASSWORD = \"api-password\"\nBW_ACCOUNT_ID = \"12345\"\n\nbandwidth_client = Bandwidth::Client.new(\n    web_rtc_basic_auth_user_name: BW_USERNAME,\n    web_rtc_basic_auth_password: BW_PASSWORD\n)\n\nweb_rtc_client = bandwidth_client.web_rtc_client.client\n\nparticipant_id = \"1234-abcd\"\n\nbegin\n    response = web_rtc_client.get_participant(BW_ACCOUNT_ID, participant_id)\n    puts response.data.id\nrescue APIException => e\n    puts e.response_code\nend\n"
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Participants"
                ],
                "summary": "Delete Participant",
                "description": "Delete participant by ID.",
                "operationId": "deleteParticipant",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Account ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "participantId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Access Denied"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "default": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "source": "curl 'https://api.webrtc.bandwidth.com/v1/accounts/12345/participants/320e2af6-13ec-498d-8b51-daba52c37853' \\\n    -X DELETE \\\n    -H 'Authorization: Basic dXNlcm5hbWU6cGFzc3dvcmQ='\n"
                    },
                    {
                        "lang": "C#",
                        "source": "using System;\nusing System.Threading.Tasks;\nusing Bandwidth.Standard;\nusing Bandwidth.Standard.Exceptions;\nusing Bandwidth.Standard.WebRtc.Models;\n\nclass Program\n{\n    static async Task Main(string[] args)\n    {\n        var username = \"api-username\";\n        var password = \"api-pasword\";\n        var accountId = \"12345\";\n\n        var participantId = \"320e2af6-13ec-498d-8b51-daba52c37853\";\n\n        var client = new BandwidthClient.Builder()\n            .WebRtcBasicAuthCredentials(username, password)\n            .Build();\n\n        try\n        {\n            await client.WebRtc.APIController.DeleteParticipantAsync(accountId, participantId);\n        }\n        catch (ApiException e)\n        {\n            Console.WriteLine(e.Message);\n        }\n    }\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import com.bandwidth.BandwidthClient;\nimport com.bandwidth.http.response.ApiResponse;\n\nimport java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.ExecutionException;\n\npublic class Sample {\n    public static final String USERNAME = \"api-username\";\n    public static final String PASSWORD = \"api-password\";\n    public static final String ACCOUNT_ID = \"12345\";\n\n    public static void main(String[] args) {\n        BandwidthClient client = new BandwidthClient.Builder()\n                .webRtcBasicAuthCredentials(USERNAME, PASSWORD)\n                .build();\n\n        String participantId = \"568749d5-04d5-483d-adf5-deac7dd3d521\";\n\n        try {\n            CompletableFuture<ApiResponse<Void>> completableFuture = client.getWebRtcClient().getAPIController().deleteParticipantAsync(ACCOUNT_ID, participantId);\n            System.out.println(completableFuture.get().getResult());\n        } catch (InterruptedException | ExecutionException e) {\n            System.out.println(e.getMessage());\n        }\n    }\n}\n"
                    },
                    {
                        "lang": "Node.js",
                        "source": "import { Client, ApiController } from '@bandwidth/webrtc';\n\nconst BW_USERNAME = \"api-username\";\nconst BW_PASSWORD = \"api-password\";\nconst BW_ACCOUNT_ID = \"12345\";\n\nconst client = new Client({\n  basicAuthUserName: BW_USERNAME,\n  basicAuthPassword: BW_PASSWORD\n});\n\nconst controller = new ApiController(client);\n\nconst accountId = BW_ACCOUNT_ID;\nconst participantId = \"320e2af6-13ec-498d-8b51-daba52c37853\"\n\nconst deleteParticipant = async function() {\n  try {\n    const response = await controller.deleteParticipant(accountId, participantId)\n    console.log(response.body);\n  } catch(error) {\n    console.error(error);\n  }\n}\n\ndeleteParticipant();\n"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n\nrequire \"vendor/autoload.php\";\n\napi-username = \"api-username\";\napi-password = \"api-pasword\";\n12345 = \"12345\";\n\n$config = new BandwidthLib\\Configuration(\n    array(\n        'webRtcBasicAuthUserName' => $BW_USERNAME,\n        'webRtcBasicAuthPassword' => $BW_PASSWORD,\n    )\n);\n$client = new BandwidthLib\\BandwidthClient($config);\n\n$webRtcClient = $client->getWebRtc()->getClient();\n\n$participantId = \"1234-abcd\";\n\ntry {\n    $webRtcClient->deleteParticipant($BW_ACCOUNT_ID, $participantId);\n} catch (BandwidthLib\\APIException $e) {\n    print_r($e->getResponseCode());\n}\n"
                    },
                    {
                        "lang": "Python",
                        "source": "from bandwidth.bandwidth_client import BandwidthClient\nfrom bandwidth.exceptions.api_exception import APIException\n\nimport os\n\nBW_USERNAME = \"api-username\"\nBW_PASSWORD = \"api-password\"\nBW_ACCOUNT_ID = \"12345\"\n\nbandwidth_client = BandwidthClient(\n    web_rtc_basic_auth_user_name=BW_USERNAME,\n    web_rtc_basic_auth_password=BW_PASSWORD\n)\nweb_rtc_client = bandwidth_client.web_rtc_client.client\n\nparticipant_id = \"1234-abcd\"\n\ntry:\n    web_rtc_client.delete_participant(BW_ACCOUNT_ID, participant_id)\nexcept APIException as e:\n    print(e.response_code)\n"
                    },
                    {
                        "lang": "Ruby",
                        "source": "require 'bandwidth'\n\ninclude Bandwidth\ninclude Bandwidth::WebRtc\n\nBW_USERNAME = \"api-username\"\nBW_PASSWORD = \"api-password\"\nBW_ACCOUNT_ID = \"12345\"\n\nbandwidth_client = Bandwidth::Client.new(\n    web_rtc_basic_auth_user_name: BW_USERNAME,\n    web_rtc_basic_auth_password: BW_PASSWORD\n)\n\nweb_rtc_client = bandwidth_client.web_rtc_client.client\n\nparticipant_id = \"1234-abcd\"\n\nbegin\n    web_rtc_client.delete_participant(BW_ACCOUNT_ID, participant_id)\nrescue APIException => e\n    puts e.response_code\nend\n"
                    }
                ]
            }
        },
        "/accounts/{accountId}/sessions": {
            "post": {
                "tags": [
                    "Sessions"
                ],
                "summary": "Create Session",
                "description": "Create a new session.\n\nSessions are idempotent, so relevant parameters must be set in this function if desired.\n",
                "operationId": "createSession",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Account ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Session parameters",
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Session"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Session"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Access Denied"
                    },
                    "default": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "source": "curl 'https://api.webrtc.bandwidth.com/v1/accounts/12345/sessions' \\\n    -X POST \\\n    -H 'Authorization: Basic dXNlcm5hbWU6cGFzc3dvcmQ=' \\\n    -H 'Content-Type: application/json' \\\n    -d '{\n        \"tag\": \"session1\"\n    }'\n"
                    },
                    {
                        "lang": "C#",
                        "source": "using System;\nusing System.Threading.Tasks;\nusing Bandwidth.Standard;\nusing Bandwidth.Standard.Exceptions;\nusing Bandwidth.Standard.WebRtc.Models;\n\nclass Program\n{\n    static async Task Main(string[] args)\n    {\n        var username = \"api-username\";\n        var password = \"api-pasword\";\n        var accountId = \"12345\";\n\n        var client = new BandwidthClient.Builder()\n            .WebRtcBasicAuthCredentials(username, password)\n            .Build();\n\n        var session = new Session()\n        {\n            Tag = \"new-session\"\n        };\n\n        try\n        {\n            var response = await client.WebRtc.APIController.CreateSessionAsync(accountId, session);\n            Console.WriteLine(response.Data);\n        }\n        catch (ApiException e)\n        {\n            Console.WriteLine(e.Message);\n        }\n    }\n}"
                    },
                    {
                        "lang": "Java",
                        "source": "import java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.ExecutionException;\n\nimport com.bandwidth.*;\nimport com.bandwidth.webrtc.models.*;\nimport com.bandwidth.http.response.ApiResponse;\n\npublic class Sample {\n    public static final String USERNAME = \"api-username\";\n    public static final String PASSWORD = \"api-password\";\n    public static final String ACCOUNT_ID = \"12345\";\n\n    public static void main(String[] args) {\n        BandwidthClient client = new BandwidthClient.Builder()\n                .webRtcBasicAuthCredentials(USERNAME, PASSWORD)\n                .build();\n\n        Session session = new Session();\n        session.setTag(\"new-session\");\n\n        try {\n            CompletableFuture<ApiResponse<Session>> completableFuture = client.getWebRtcClient().getAPIController().createSessionAsync(ACCOUNT_ID, session);\n            System.out.println(completableFuture.get().getResult());\n        } catch (InterruptedException | ExecutionException e) {\n            System.out.println(e.getMessage());\n        }\n    }\n}\n"
                    },
                    {
                        "lang": "Node.js",
                        "source": "import { Client, ApiController } from '@bandwidth/webrtc';\n\nconst BW_USERNAME = \"api-username\";\nconst BW_PASSWORD = \"api-password\";\nconst BW_ACCOUNT_ID = \"12345\";\n\nconst client = new Client({\n  basicAuthUserName: BW_USERNAME,\n  basicAuthPassword: BW_PASSWORD\n});\n\nconst controller = new ApiController(client);\n\nconst accountId = BW_ACCOUNT_ID;\n\nconst createSession = async function() {\n  try {\n    const response = await controller.createSession(accountId, {\n      tag: '{\"SessionName\": \"my_session\"}'\n    })\n    console.log(response.body);\n  } catch(error) {\n    console.error(error);\n  }\n}\n\ncreateSession();\n"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n\nrequire \"vendor/autoload.php\";\n\napi-username = \"api-username\";\napi-password = \"api-pasword\";\n12345 = \"12345\";\n\n$config = new BandwidthLib\\Configuration(\n    array(\n        'webRtcBasicAuthUserName' => $BW_USERNAME,\n        'webRtcBasicAuthPassword' => $BW_PASSWORD,\n    )\n);\n$client = new BandwidthLib\\BandwidthClient($config);\n\n$webRtcClient = $client->getWebRtc()->getClient();\n\n$body = new BandwidthLib\\WebRtc\\Models\\Session();\n$body->tag = \"tag\";\n\ntry {\n    $response = $webRtcClient->createSession($BW_ACCOUNT_ID, $body);\n    print_r($response->getResult()->id);\n} catch (BandwidthLib\\APIException $e) {\n    print_r($e->getResponseCode());\n}\n"
                    },
                    {
                        "lang": "Python",
                        "source": "from bandwidth.bandwidth_client import BandwidthClient\nfrom bandwidth.exceptions.api_exception import APIException\nfrom bandwidth.webrtc.models.session import Session\n\nimport os\n\nBW_USERNAME = \"api-username\"\nBW_PASSWORD = \"api-password\"\nBW_ACCOUNT_ID = \"12345\"\n\nbandwidth_client = BandwidthClient(\n    web_rtc_basic_auth_user_name=BW_USERNAME,\n    web_rtc_basic_auth_password=BW_PASSWORD\n)\nweb_rtc_client = bandwidth_client.web_rtc_client.client\n\nbody = Session()\nbody.tag = \"tag\"\n\ntry:\n    response = web_rtc_client.create_session(BW_ACCOUNT_ID, body)\n    print(response.body.id)\nexcept APIException as e:\n    print(e.response_code)\n"
                    },
                    {
                        "lang": "Ruby",
                        "source": "require 'bandwidth'\n\ninclude Bandwidth\ninclude Bandwidth::WebRtc\n\nBW_USERNAME = \"api-username\"\nBW_PASSWORD = \"api-password\"\nBW_ACCOUNT_ID = \"12345\"\n\nbandwidth_client = Bandwidth::Client.new(\n    web_rtc_basic_auth_user_name: BW_USERNAME,\n    web_rtc_basic_auth_password: BW_PASSWORD\n)\n\nweb_rtc_client = bandwidth_client.web_rtc_client.client\n\nbody = Session.new\nbody.tag = \"tag\"\n\nbegin\n    response = web_rtc_client.create_session(BW_ACCOUNT_ID, :body => body)\n    puts response.data.id\nrescue APIException => e\n    puts e.response_code\nend\n"
                    }
                ]
            }
        },
        "/accounts/{accountId}/sessions/{sessionId}": {
            "get": {
                "tags": [
                    "Sessions"
                ],
                "summary": "Get Session",
                "description": "Get session by ID.",
                "operationId": "getSession",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Account ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "sessionId",
                        "in": "path",
                        "description": "Session ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Session"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Access Denied"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "default": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "source": "curl 'https://api.webrtc.bandwidth.com/v1/accounts/12345/sessions/75c21163-e110-41bc-bd76-1bb428ec85d5' \\\n    -H 'Authorization: Basic dXNlcm5hbWU6cGFzc3dvcmQ='\n"
                    },
                    {
                        "lang": "C#",
                        "source": "using System;\nusing System.Threading.Tasks;\nusing Bandwidth.Standard;\nusing Bandwidth.Standard.Exceptions;\nusing Bandwidth.Standard.WebRtc.Models;\n\nclass Program\n{\n    static async Task Main(string[] args)\n    {\n        var username = \"api-username\";\n        var password = \"api-pasword\";\n        var accountId = \"12345\";\n\n        var sessionId = \"75c21163-e110-41bc-bd76-1bb428ec85d5\"; // Returned via WebRTC's create session request.\n\n        var client = new BandwidthClient.Builder()\n            .WebRtcBasicAuthCredentials(username, password)\n            .Build();\n\n        try\n        {\n            var response = await client.WebRtc.APIController.GetSessionAsync(accountId, sessionId);\n            Console.WriteLine(response.Data);\n        }\n        catch (ApiException e)\n        {\n            Console.WriteLine(e.Message);\n        }\n    }\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import com.bandwidth.BandwidthClient;\nimport com.bandwidth.http.response.ApiResponse;\nimport com.bandwidth.webrtc.models.Session;\n\nimport java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.ExecutionException;\n\npublic class Sample {\n    public static final String USERNAME = \"api-username\";\n    public static final String PASSWORD = \"api-password\";\n    public static final String ACCOUNT_ID = \"12345\";\n\n    public static void main(String[] args) {\n        String sessionId = \"75c21163-e110-41bc-bd76-1bb428ec85d5\";\n\n        BandwidthClient client = new BandwidthClient.Builder()\n                .webRtcBasicAuthCredentials(USERNAME, PASSWORD)\n                .build();\n\n        try {\n            CompletableFuture<ApiResponse<Session>> completableFuture = client.getWebRtcClient().getAPIController().getSessionAsync(ACCOUNT_ID, sessionId);\n            System.out.println(completableFuture.get().getResult());\n        } catch (InterruptedException | ExecutionException e) {\n            System.out.println(e.getMessage());\n        }\n    }\n}\n"
                    },
                    {
                        "lang": "Node.js",
                        "source": "import { Client, ApiController } from '@bandwidth/webrtc';\n\nconst BW_USERNAME = \"api-username\";\nconst BW_PASSWORD = \"api-password\";\nconst BW_ACCOUNT_ID = \"12345\";\n\nconst client = new Client({\n  basicAuthUserName: BW_USERNAME,\n  basicAuthPassword: BW_PASSWORD\n});\n\nconst controller = new ApiController(client);\n\nconst accountId = BW_ACCOUNT_ID;\nconst sessionId = \"75c21163-e110-41bc-bd76-1bb428ec85d5\"\n\nconst getSession = async function() {\n  try {\n    const response = await controller.getSession(accountId, sessionId)\n    console.log(response.body);\n  } catch(error) {\n    console.error(error);\n  }\n}\n\ngetSession();\n"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n\nrequire \"vendor/autoload.php\";\n\napi-username = \"api-username\";\napi-password = \"api-pasword\";\n12345 = \"12345\";\n\n$config = new BandwidthLib\\Configuration(\n    array(\n        'webRtcBasicAuthUserName' => $BW_USERNAME,\n        'webRtcBasicAuthPassword' => $BW_PASSWORD,\n    )\n);\n$client = new BandwidthLib\\BandwidthClient($config);\n\n$webRtcClient = $client->getWebRtc()->getClient();\n\n$sessionId = \"1234-qwer\";\n\ntry {\n    $response = $webRtcClient->getSession($BW_ACCOUNT_ID, $sessionId);\n    print_r($response->getResult()->id);\n} catch (BandwidthLib\\APIException $e) {\n    print_r($e->getResponseCode());\n}\n"
                    },
                    {
                        "lang": "Python",
                        "source": "from bandwidth.bandwidth_client import BandwidthClient\nfrom bandwidth.exceptions.api_exception import APIException\n\nimport os\n\nBW_USERNAME = \"api-username\"\nBW_PASSWORD = \"api-password\"\nBW_ACCOUNT_ID = \"12345\"\n\nbandwidth_client = BandwidthClient(\n    web_rtc_basic_auth_user_name=BW_USERNAME,\n    web_rtc_basic_auth_password=BW_PASSWORD\n)\n\nweb_rtc_client = bandwidth_client.web_rtc_client.client\n\nsession_id = \"1234-abcd\"\n\ntry:\n    response = web_rtc_client.get_session(BW_ACCOUNT_ID, session_id)\n    print(response.body.id)\nexcept APIException as e:\n    print(e.response_code)\n"
                    },
                    {
                        "lang": "Ruby",
                        "source": "require 'bandwidth'\n\ninclude Bandwidth\ninclude Bandwidth::WebRtc\n\nBW_USERNAME = \"api-username\"\nBW_PASSWORD = \"api-password\"\nBW_ACCOUNT_ID = \"12345\"\n\nbandwidth_client = Bandwidth::Client.new(\n    web_rtc_basic_auth_user_name: BW_USERNAME,\n    web_rtc_basic_auth_password: BW_PASSWORD\n)\n\nweb_rtc_client = bandwidth_client.web_rtc_client.client\n\nsession_id = \"1234-abcd\"\n\nbegin\n    response = web_rtc_client.get_session(BW_ACCOUNT_ID, session_id)\n    print(response.data.id)\nrescue APIException => e\n    print(e.response_code)\nend\n"
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Sessions"
                ],
                "summary": "Delete Session",
                "description": "Delete session by ID.",
                "operationId": "deleteSession",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Account ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "sessionId",
                        "in": "path",
                        "description": "Session ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Access Denied"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "default": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "source": "curl 'https://api.webrtc.bandwidth.com/v1/accounts/12345/sessions/75c21163-e110-41bc-bd76-1bb428ec85d5' \\\n    -X DELETE \\\n    -H 'Authorization: Basic dXNlcm5hbWU6cGFzc3dvcmQ='\n"
                    },
                    {
                        "lang": "C#",
                        "source": "using System;\nusing System.Threading.Tasks;\nusing Bandwidth.Standard;\nusing Bandwidth.Standard.Exceptions;\nusing Bandwidth.Standard.WebRtc.Models;\n\nclass Program\n{\n    static async Task Main(string[] args)\n    {\n        var username = \"api-username\";\n        var password = \"api-pasword\";\n        var accountId = \"12345\";\n\n        var sessionId = \"75c21163-e110-41bc-bd76-1bb428ec85d5\"; // Returned via WebRTC's create session request.\n\n        var client = new BandwidthClient.Builder()\n            .WebRtcBasicAuthCredentials(username, password)\n            .Build();\n\n        try\n        {\n            await client.WebRtc.APIController.DeleteSessionAsync(accountId, sessionId);\n        }\n        catch (ApiException e)\n        {\n            Console.WriteLine(e.Message);\n        }\n    }\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import com.bandwidth.BandwidthClient;\nimport com.bandwidth.http.response.ApiResponse;\n\nimport java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.ExecutionException;\n\npublic class Sample {\n    public static final String USERNAME = \"api-username\";\n    public static final String PASSWORD = \"api-password\";\n    public static final String ACCOUNT_ID = \"12345\";\n\n    public static void main(String[] args) {\n        BandwidthClient client = new BandwidthClient.Builder()\n                .webRtcBasicAuthCredentials(USERNAME, PASSWORD)\n                .build();\n\n        String sessionId = \"75c21163-e110-41bc-bd76-1bb428ec85d5\";\n\n        try {\n            CompletableFuture<ApiResponse<Void>> completableFuture = client.getWebRtcClient().getAPIController().deleteSessionAsync(ACCOUNT_ID, sessionId);\n            System.out.println(completableFuture.get().getResult());\n        } catch (InterruptedException | ExecutionException e) {\n            System.out.println(e.getMessage());\n        }\n    }\n}\n"
                    },
                    {
                        "lang": "Node.js",
                        "source": "import { Client, ApiController } from '@bandwidth/webrtc';\n\nconst BW_USERNAME = \"api-username\";\nconst BW_PASSWORD = \"api-password\";\nconst BW_ACCOUNT_ID = \"12345\";\n\nconst client = new Client({\n  basicAuthUserName: BW_USERNAME,\n  basicAuthPassword: BW_PASSWORD\n});\n\nconst controller = new ApiController(client);\n\nconst accountId = BW_ACCOUNT_ID;\nconst sessionId = \"75c21163-e110-41bc-bd76-1bb428ec85d5\"\n\nconst deleteSession = async function() {\n  try {\n    const response = await controller.deleteSession(accountId, sessionId)\n    console.log(response.body);\n  } catch(error) {\n    console.error(error);\n  }\n}\n\ndeleteSession();\n"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n\nrequire \"vendor/autoload.php\";\n\napi-username = \"api-username\";\napi-password = \"api-pasword\";\n12345 = \"12345\";\n\n$config = new BandwidthLib\\Configuration(\n    array(\n        'webRtcBasicAuthUserName' => $BW_USERNAME,\n        'webRtcBasicAuthPassword' => $BW_PASSWORD,\n    )\n);\n$client = new BandwidthLib\\BandwidthClient($config);\n\n$webRtcClient = $client->getWebRtc()->getClient();\n\n$sessionId = \"1234-qwer\";\n\ntry {\n    $webRtcClient->deleteSession($BW_ACCOUNT_ID, $sessionId);\n} catch (BandwidthLib\\APIException $e) {\n    print_r($e->getResponseCode());\n}\n\n"
                    },
                    {
                        "lang": "Python",
                        "source": "from bandwidth.bandwidth_client import BandwidthClient\nfrom bandwidth.exceptions.api_exception import APIException\n\nimport os\n\nBW_USERNAME = \"api-username\"\nBW_PASSWORD = \"api-password\"\nBW_ACCOUNT_ID = \"12345\"\n\nbandwidth_client = BandwidthClient(\n    web_rtc_basic_auth_user_name=BW_USERNAME,\n    web_rtc_basic_auth_password=BW_PASSWORD\n)\nweb_rtc_client = bandwidth_client.web_rtc_client.client\n\nsession_id = \"1234-abcd\"\n\ntry:\n    web_rtc_client.delete_session(BW_ACCOUNT_ID, session_id)\nexcept APIException as e:\n    print(e.response_code)\n"
                    },
                    {
                        "lang": "Ruby",
                        "source": "require 'bandwidth'\n\ninclude Bandwidth\ninclude Bandwidth::WebRtc\n\nBW_USERNAME = \"api-username\"\nBW_PASSWORD = \"api-password\"\nBW_ACCOUNT_ID = \"12345\"\n\nbandwidth_client = Bandwidth::Client.new(\n    web_rtc_basic_auth_user_name: BW_USERNAME,\n    web_rtc_basic_auth_password: BW_PASSWORD\n)\n\nweb_rtc_client = bandwidth_client.web_rtc_client.client\n\nsession_id = \"1234-abcd\"\n\nbegin\n    web_rtc_client.delete_session(BW_ACCOUNT_ID, session_id)\nrescue APIException => e\n    puts e.response_code\nend\n"
                    }
                ]
            }
        },
        "/accounts/{accountId}/sessions/{sessionId}/participants": {
            "get": {
                "tags": [
                    "Sessions"
                ],
                "summary": "List Participants in Session",
                "description": "List participants in a session.",
                "operationId": "listSessionParticipants",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Account ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "sessionId",
                        "in": "path",
                        "description": "Session ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Participant"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Access Denied"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "default": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "source": "curl 'https://api.webrtc.bandwidth.com/v1/accounts/12345/sessions/75c21163-e110-41bc-bd76-1bb428ec85d5/participants' \\\n    -H 'Authorization: Basic dXNlcm5hbWU6cGFzc3dvcmQ='\n"
                    },
                    {
                        "lang": "C#",
                        "source": "using System;\nusing System.Threading.Tasks;\nusing Bandwidth.Standard;\nusing Bandwidth.Standard.Exceptions;\nusing Bandwidth.Standard.WebRtc.Models;\n\nclass Program\n{\n    static async Task Main(string[] args)\n    {\n        var username = \"api-username\";\n        var password = \"api-pasword\";\n        var accountId = \"12345\";\n\n        var sessionId = \"75c21163-e110-41bc-bd76-1bb428ec85d5\"; // Returned via WebRTC's create session request.\n\n        var client = new BandwidthClient.Builder()\n            .WebRtcBasicAuthCredentials(username, password)\n            .Build();\n\n        try\n        {\n            var response = await client.WebRtc.APIController.ListSessionParticipantsAsync(accountId, sessionId);\n            Console.WriteLine(response.Data);\n        }\n        catch (ApiException e)\n        {\n            Console.WriteLine(e.Message);\n        }\n    }\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import com.bandwidth.BandwidthClient;\nimport com.bandwidth.http.response.ApiResponse;\nimport com.bandwidth.webrtc.models.Participant;\n\nimport java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.ExecutionException;\nimport java.util.List;\n\npublic class Sample {\n    public static final String USERNAME = \"api-username\";\n    public static final String PASSWORD = \"api-password\";\n    public static final String ACCOUNT_ID = \"12345\";\n\n    public static void main(String[] args) {\n        String sessionId = \"75c21163-e110-41bc-bd76-1bb428ec85d5\";\n\n        BandwidthClient client = new BandwidthClient.Builder()\n                .webRtcBasicAuthCredentials(USERNAME, PASSWORD)\n                .build();\n\n        try {\n            CompletableFuture<ApiResponse<List<Participant>>> completableFuture = client.getWebRtcClient().getAPIController().listSessionParticipantsAsync(ACCOUNT_ID, sessionId);\n            System.out.println(completableFuture.get().getResult());\n        } catch (InterruptedException | ExecutionException e) {\n            System.out.println(e.getMessage());\n        }\n    }\n}\n"
                    },
                    {
                        "lang": "Node.js",
                        "source": "import { Client, ApiController } from '@bandwidth/webrtc';\n\nconst BW_USERNAME = \"api-username\";\nconst BW_PASSWORD = \"api-password\";\nconst BW_ACCOUNT_ID = \"12345\";\n\nconst client = new Client({\n  basicAuthUserName: BW_USERNAME,\n  basicAuthPassword: BW_PASSWORD\n});\n\nconst controller = new ApiController(client);\n\nconst accountId = BW_ACCOUNT_ID;\nconst sessionId = \"75c21163-e110-41bc-bd76-1bb428ec85d5\"\n\nconst listSessionParticipants = async function() {\n  try {\n    const response = await controller.listSessionParticipants(accountId, sessionId)\n    console.log(response.body);\n  } catch(error) {\n    console.error(error);\n  }\n}\n\nlistSessionParticipants();\n"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n\nrequire \"vendor/autoload.php\";\n\napi-username = \"api-username\";\napi-password = \"api-pasword\";\n12345 = \"12345\";\n\n$config = new BandwidthLib\\Configuration(\n    array(\n        'webRtcBasicAuthUserName' => $BW_USERNAME,\n        'webRtcBasicAuthPassword' => $BW_PASSWORD,\n    )\n);\n$client = new BandwidthLib\\BandwidthClient($config);\n\n$webRtcClient = $client->getWebRtc()->getClient();\n\n$sessionId = \"1234-qwer\";\n\ntry {\n    $response = $webRtcClient->listSessionParticipants($BW_ACCOUNT_ID, $sessionId);\n    print_r($response->getResult());\n} catch (BandwidthLib\\APIException $e) {\n    print_r($e->getResponseCode());\n}\n"
                    },
                    {
                        "lang": "Python",
                        "source": "from bandwidth.bandwidth_client import BandwidthClient\nfrom bandwidth.exceptions.api_exception import APIException\n\nimport os\n\nBW_USERNAME = \"api-username\"\nBW_PASSWORD = \"api-password\"\nBW_ACCOUNT_ID = \"12345\"\n\nbandwidth_client = BandwidthClient(\n    web_rtc_basic_auth_user_name=BW_USERNAME,\n    web_rtc_basic_auth_password=BW_PASSWORD\n)\n\nweb_rtc_client = bandwidth_client.web_rtc_client.client\n\nsession_id = \"1234-abcd\"\n\ntry:\n    response = web_rtc_client.list_session_participants(BW_ACCOUNT_ID, session_id)\n    print(response.body)\nexcept APIException as e:\n    print(e.response_code)\n"
                    },
                    {
                        "lang": "Ruby",
                        "source": "require 'bandwidth'\n\ninclude Bandwidth\ninclude Bandwidth::WebRtc\n\nBW_USERNAME = \"api-username\"\nBW_PASSWORD = \"api-password\"\nBW_ACCOUNT_ID = \"12345\"\n\nbandwidth_client = Bandwidth::Client.new(\n    web_rtc_basic_auth_user_name: BW_USERNAME,\n    web_rtc_basic_auth_password: BW_PASSWORD\n)\n\nweb_rtc_client = bandwidth_client.web_rtc_client.client\n\nsession_id = \"1234-abcd\"\n\nbegin\n    response = web_rtc_client.list_session_participants(BW_ACCOUNT_ID, session_id)\n    puts response.end\nrescue APIException => e\n    puts e.response_code\nend\n"
                    }
                ]
            }
        },
        "/accounts/{accountId}/sessions/{sessionId}/participants/{participantId}": {
            "put": {
                "tags": [
                    "Sessions"
                ],
                "summary": "Add Participant to Session",
                "description": "Add a participant to a session.\n\nSubscriptions can optionally be provided as part of this call.\n",
                "operationId": "addParticipantToSession",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Account ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "sessionId",
                        "in": "path",
                        "description": "Session ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "participantId",
                        "in": "path",
                        "description": "Participant ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Optional set of subscriptions to set on the participant.\nCalling this endpoint with no/empty body will only add the participant to the session.\n\nNOTE: the request body for this endpoint is OPTIONAL and provided as a convenience to avoid calls to this and the Update Participant Subscriptions endpoint.",
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Subscriptions"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Access Denied"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "default": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "source": "curl 'https://api.webrtc.bandwidth.com/v1/accounts/12345/sessions/75c21163-e110-41bc-bd76-1bb428ec85d5/participants/568749d5-04d5-483d-adf5-deac7dd3d521' \\\n    -X PUT \\\n    -H 'Authorization: Basic dXNlcm5hbWU6cGFzc3dvcmQ=' \\\n    -H 'Content-Type: application/json' \\\n    -d '{\n        \"sessionId\": \"d8886aad-b956-4e1b-b2f4-d7c9f8162772\",\n        \"participants\": [\n            {\n                \"participantId\": \"568749d5-04d5-483d-adf5-deac7dd3d521\"\n            },\n            {\n                \"participantId\": \"0275e47f-dd21-4cf0-a1e1-dfdc719e73a7\"\n            }\n        ]\n    }'\n"
                    },
                    {
                        "lang": "C#",
                        "source": "using System;\nusing System.Threading.Tasks;\nusing Bandwidth.Standard;\nusing Bandwidth.Standard.Exceptions;\nusing Bandwidth.Standard.WebRtc.Models;\n\nclass Program\n{\n    static async Task Main(string[] args)\n    {\n        var username = \"api-username\";\n        var password = \"api-pasword\";\n        var accountId = \"12345\";\n\n        var sessionId = \"75c21163-e110-41bc-bd76-1bb428ec85d5\"; // Returned via WebRTC's create session request.\n        var participantId = \"568749d5-04d5-483d-adf5-deac7dd3d521\"; // Returned via WebRTC's create participant request.\n\n        var client = new BandwidthClient.Builder()\n            .WebRtcBasicAuthCredentials(username, password)\n            .Build();\n\n        try\n        {\n            await client.WebRtc.APIController.AddParticipantToSessionAsync(accountId, sessionId, participantId);\n        }\n        catch (ApiException e)\n        {\n            Console.WriteLine(e.Message);\n        }\n    }\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import com.bandwidth.BandwidthClient;\nimport com.bandwidth.http.response.ApiResponse;\n\nimport java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.ExecutionException;\n\npublic class Sample {\n    public static final String USERNAME = \"api-username\";\n    public static final String PASSWORD = \"api-password\";\n    public static final String ACCOUNT_ID = \"12345\";\n\n    public static void main(String[] args) {\n        String sessionId = \"75c21163-e110-41bc-bd76-1bb428ec85d5\"; // Returned via WebRTC's create session request.\n        String participantId = \"568749d5-04d5-483d-adf5-deac7dd3d521\"; // Returned via WebRTC's create participant request.\n\n        BandwidthClient client = new BandwidthClient.Builder()\n                .webRtcBasicAuthCredentials(USERNAME, PASSWORD)\n                .build();\n\n        try {\n            CompletableFuture<ApiResponse<Void>> completableFuture = client.getWebRtcClient().getAPIController().addParticipantToSessionAsync(ACCOUNT_ID, sessionId, participantId, null);\n            System.out.println(completableFuture.get().getResult());\n        } catch (InterruptedException | ExecutionException e) {\n            System.out.println(e.getMessage());\n        }\n    }\n}\n"
                    },
                    {
                        "lang": "Node.js",
                        "source": "import { Client, ApiController } from '@bandwidth/webrtc';\n\nconst BW_USERNAME = \"api-username\";\nconst BW_PASSWORD = \"api-password\";\nconst BW_ACCOUNT_ID = \"12345\";\n\nconst client = new Client({\n  basicAuthUserName: BW_USERNAME,\n  basicAuthPassword: BW_PASSWORD\n});\n\nconst controller = new ApiController(client);\n\nconst accountId = BW_ACCOUNT_ID;\nconst sessionId = \"75c21163-e110-41bc-bd76-1bb428ec85d5\"\nconst participantId = \"320e2af6-13ec-498d-8b51-daba52c37853\"\n\nconst addParticipantToSession = async function() {\n  try {\n    const response = await controller.addParticipantToSession(accountId, sessionId, participantId)\n    console.log(response.body);\n  } catch(error) {\n    console.error(error);\n  }\n}\n\naddParticipantToSession();\n"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n\nrequire \"vendor/autoload.php\";\n\napi-username = \"api-username\";\napi-password = \"api-pasword\";\n12345 = \"12345\";\n\n$config = new BandwidthLib\\Configuration(\n    array(\n        'webRtcBasicAuthUserName' => $BW_USERNAME,\n        'webRtcBasicAuthPassword' => $BW_PASSWORD,\n    )\n);\n$client = new BandwidthLib\\BandwidthClient($config);\n\n$webRtcClient = $client->getWebRtc()->getClient();\n\n$sessionId = \"1234-abcd\";\n$participantId = \"4321-dcba\";\n\ntry {\n    $webRtcClient->addParticipantToSession($BW_ACCOUNT_ID, $sessionId, $participantId);\n} catch (BandwidthLib\\APIException $e) {\n    print_r($e->getResponseCode());\n}\n"
                    },
                    {
                        "lang": "Python",
                        "source": "from bandwidth.bandwidth_client import BandwidthClient\nfrom bandwidth.exceptions.api_exception import APIException\n\nimport os\n\nBW_USERNAME = \"api-username\"\nBW_PASSWORD = \"api-password\"\nBW_ACCOUNT_ID = \"12345\"\n\nbandwidth_client = BandwidthClient(\n    web_rtc_basic_auth_user_name=BW_USERNAME,\n    web_rtc_basic_auth_password=BW_PASSWORD\n)\nweb_rtc_client = bandwidth_client.web_rtc_client.client\n\nsession_id = \"1234-abcd\"\nparticipant_id = \"4321-dcba\"\n\ntry:\n    web_rtc_client.add_participant_to_session(BW_ACCOUNT_ID, session_id, participant_id)\nexcept APIException as e:\n    print(e.response_code)\n"
                    },
                    {
                        "lang": "Ruby",
                        "source": "require 'bandwidth'\n\ninclude Bandwidth\ninclude Bandwidth::WebRtc\n\nBW_USERNAME = \"api-username\"\nBW_PASSWORD = \"api-password\"\nBW_ACCOUNT_ID = \"12345\"\n\nbandwidth_client = Bandwidth::Client.new(\n    web_rtc_basic_auth_user_name: BW_USERNAME,\n    web_rtc_basic_auth_password: BW_PASSWORD\n)\n\nweb_rtc_client = bandwidth_client.web_rtc_client.client\n\nsession_id = \"1234-abcd\"\nparticipant_id = \"4321-dcba\"\n\nbegin\n    web_rtc_client.add_participant_to_session(BW_ACCOUNT_ID, session_id, participant_id)\nrescue APIException => e\n    puts e.response_code\nend\n"
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Sessions"
                ],
                "summary": "Remove Participant from Session",
                "description": "Remove a participant from a session.\n\nThis will automatically remove any subscriptions the participant has associated with this session.\n",
                "operationId": "removeParticipantFromSession",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Account ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "sessionId",
                        "in": "path",
                        "description": "Session ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "participantId",
                        "in": "path",
                        "description": "Participant ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Access Denied"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "default": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "source": "curl 'https://api.webrtc.bandwidth.com/v1/accounts/12345/sessions/75c21163-e110-41bc-bd76-1bb428ec85d5/participants/568749d5-04d5-483d-adf5-deac7dd3d521' \\\n    -X DELETE \\\n    -H 'Authorization: Basic dXNlcm5hbWU6cGFzc3dvcmQ='\n"
                    },
                    {
                        "lang": "C#",
                        "source": "using System;\nusing System.Threading.Tasks;\nusing Bandwidth.Standard;\nusing Bandwidth.Standard.Exceptions;\nusing Bandwidth.Standard.WebRtc.Models;\n\nclass Program\n{\n    static async Task Main(string[] args)\n    {\n        var username = \"api-username\";\n        var password = \"api-pasword\";\n        var accountId = \"12345\";\n\n        var sessionId = \"75c21163-e110-41bc-bd76-1bb428ec85d5\"; // Returned via WebRTC's create session request.\n        var participantId = \"568749d5-04d5-483d-adf5-deac7dd3d521\"; // Returned via WebRTC's create participant request.\n\n        var client = new BandwidthClient.Builder()\n            .WebRtcBasicAuthCredentials(username, password)\n            .Build();\n\n        try\n        {\n            await client.WebRtc.APIController.RemoveParticipantFromSessionAsync(accountId, sessionId, participantId);\n        }\n        catch (ApiException e)\n        {\n            Console.WriteLine(e.Message);\n        }\n    }\n}"
                    },
                    {
                        "lang": "Java",
                        "source": "import com.bandwidth.BandwidthClient;\nimport com.bandwidth.http.response.ApiResponse;\n\nimport java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.ExecutionException;\n\npublic class Sample {\n    public static final String USERNAME = \"api-username\";\n    public static final String PASSWORD = \"api-password\";\n    public static final String ACCOUNT_ID = \"12345\";\n\n    public static void main(String[] args) {\n        String sessionId = \"75c21163-e110-41bc-bd76-1bb428ec85d5\";\n        String participantId = \"568749d5-04d5-483d-adf5-deac7dd3d521\";\n\n        BandwidthClient client = new BandwidthClient.Builder()\n                .webRtcBasicAuthCredentials(USERNAME, PASSWORD)\n                .build();\n\n        try {\n            CompletableFuture<ApiResponse<Void>> completableFuture = client.getWebRtcClient().getAPIController().removeParticipantFromSessionAsync(ACCOUNT_ID, sessionId, participantId);\n            System.out.println(completableFuture.get().getResult());\n        } catch (InterruptedException | ExecutionException e) {\n            System.out.println(e.getMessage());\n        }\n    }\n}\n"
                    },
                    {
                        "lang": "Node.js",
                        "source": "import { Client, ApiController } from '@bandwidth/webrtc';\n\nconst BW_USERNAME = \"api-username\";\nconst BW_PASSWORD = \"api-password\";\nconst BW_ACCOUNT_ID = \"12345\";\n\nconst client = new Client({\n  basicAuthUserName: BW_USERNAME,\n  basicAuthPassword: BW_PASSWORD\n});\n\nconst controller = new ApiController(client);\n\nconst accountId = BW_ACCOUNT_ID;\nconst sessionId = \"75c21163-e110-41bc-bd76-1bb428ec85d5\"\nconst participantId = \"320e2af6-13ec-498d-8b51-daba52c37853\"\n\nconst removeParticipantFromSession = async function() {\n  try {\n    const response = await controller.removeParticipantFromSession(accountId, sessionId, participantId)\n    console.log(response.body);\n  } catch(error) {\n    console.error(error);\n  }\n}\n\nremoveParticipantFromSession();\n"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n\nrequire \"vendor/autoload.php\";\n\napi-username = \"api-username\";\napi-password = \"api-pasword\";\n12345 = \"12345\";\n\n$config = new BandwidthLib\\Configuration(\n    array(\n        'webRtcBasicAuthUserName' => $BW_USERNAME,\n        'webRtcBasicAuthPassword' => $BW_PASSWORD,\n    )\n);\n$client = new BandwidthLib\\BandwidthClient($config);\n\n$webRtcClient = $client->getWebRtc()->getClient();\n\n$sessionId = \"1234-abcd\";\n$participantId = \"4321-dcba\";\n\ntry {\n    $webRtcClient->removeParticipantFromSession($BW_ACCOUNT_ID, $sessionId, $participantId);\n} catch (BandwidthLib\\APIException $e) {\n    print_r($e->getResponseCode());\n}\n"
                    },
                    {
                        "lang": "Python",
                        "source": "from bandwidth.bandwidth_client import BandwidthClient\nfrom bandwidth.exceptions.api_exception import APIException\n\nimport os\n\nBW_USERNAME = \"api-username\"\nBW_PASSWORD = \"api-password\"\nBW_ACCOUNT_ID = \"12345\"\n\nbandwidth_client = BandwidthClient(\n    web_rtc_basic_auth_user_name=BW_USERNAME,\n    web_rtc_basic_auth_password=BW_PASSWORD\n)\n\nweb_rtc_client = bandwidth_client.web_rtc_client.client\n\nsession_id = \"1234-abcd\"\nparticipant_id = \"4312-dbca\"\n\ntry:\n    web_rtc_client.remove_participant_from_session(BW_ACCOUNT_ID, session_id, participant_id)\nexcept APIException as e:\n    print(e.response_code)\n"
                    },
                    {
                        "lang": "Ruby",
                        "source": "require 'bandwidth'\n\ninclude Bandwidth\ninclude Bandwidth::WebRtc\n\nBW_USERNAME = \"api-username\"\nBW_PASSWORD = \"api-password\"\nBW_ACCOUNT_ID = \"12345\"\n\nbandwidth_client = Bandwidth::Client.new(\n    web_rtc_basic_auth_user_name: BW_USERNAME,\n    web_rtc_basic_auth_password: BW_PASSWORD\n)\n\nweb_rtc_client = bandwidth_client.web_rtc_client.client\n\nsession_id = \"1234-abcd\"\nparticipant_id = \"4312-dbca\"\n\nbegin\n    web_rtc_client.remove_participant_from_session(BW_ACCOUNT_ID, session_id, participant_id)\nrescue APIException => e\n    puts e.response_code\nend\n"
                    }
                ]
            }
        },
        "/accounts/{accountId}/sessions/{sessionId}/participants/{participantId}/subscriptions": {
            "get": {
                "tags": [
                    "Sessions"
                ],
                "summary": "Get Participant Subscriptions",
                "description": "Get a participant's subscriptions.",
                "operationId": "getParticipantSubscriptions",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Account ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "sessionId",
                        "in": "path",
                        "description": "Session ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "participantId",
                        "in": "path",
                        "description": "Participant ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Subscriptions"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Access Denied"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "default": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "source": "curl 'https://api.webrtc.bandwidth.com/v1/accounts/12345/sessions/75c21163-e110-41bc-bd76-1bb428ec85d5/participants/568749d5-04d5-483d-adf5-deac7dd3d521/subscriptions' \\\n    -H 'Authorization: Basic dXNlcm5hbWU6cGFzc3dvcmQ='\n"
                    },
                    {
                        "lang": "C#",
                        "source": "using System;\nusing System.Threading.Tasks;\nusing Bandwidth.Standard;\nusing Bandwidth.Standard.Exceptions;\nusing Bandwidth.Standard.WebRtc.Models;\n\nclass Program\n{\n    static async Task Main(string[] args)\n    {\n        var username = \"api-username\";\n        var password = \"api-pasword\";\n        var accountId = \"12345\";\n\n        var sessionId = \"75c21163-e110-41bc-bd76-1bb428ec85d5\"; // Returned via WebRTC's create session request.\n        var participantId = \"568749d5-04d5-483d-adf5-deac7dd3d521\"; // Returned via WebRTC's create participant request.\n\n        var client = new BandwidthClient.Builder()\n            .WebRtcBasicAuthCredentials(username, password)\n            .Build();\n\n        try\n        {\n            var response = await client.WebRtc.APIController.GetParticipantSubscriptionsAsync(accountId, sessionId, participantId);\n            Console.WriteLine(response.Data);\n        }\n        catch (ApiException e)\n        {\n            Console.WriteLine(e.Message);\n        }\n    }\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import com.bandwidth.BandwidthClient;\nimport com.bandwidth.http.response.ApiResponse;\nimport com.bandwidth.webrtc.models.Subscriptions;\n\nimport java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.ExecutionException;\n\npublic class Sample {\n    public static final String USERNAME = \"api-username\";\n    public static final String PASSWORD = \"api-password\";\n    public static final String ACCOUNT_ID = \"12345\";\n\n    public static void main(String[] args) {\n        String sessionId = \"75c21163-e110-41bc-bd76-1bb428ec85d5\";\n        String participantId = \"568749d5-04d5-483d-adf5-deac7dd3d521\";\n\n        BandwidthClient client = new BandwidthClient.Builder()\n                .webRtcBasicAuthCredentials(USERNAME, PASSWORD)\n                .build();\n\n        try {\n            CompletableFuture<ApiResponse<Subscriptions>> completableFuture = client.getWebRtcClient().getAPIController().getParticipantSubscriptionsAsync(ACCOUNT_ID, sessionId, participantId);\n            System.out.println(completableFuture.get().getResult());\n        } catch (InterruptedException | ExecutionException e) {\n            System.out.println(e.getMessage());\n        }\n    }\n}\n"
                    },
                    {
                        "lang": "Node.js",
                        "source": "import { Client, ApiController } from '@bandwidth/webrtc';\n\nconst BW_USERNAME = \"api-username\";\nconst BW_PASSWORD = \"api-password\";\nconst BW_ACCOUNT_ID = \"12345\";\n\nconst client = new Client({\n  basicAuthUserName: BW_USERNAME,\n  basicAuthPassword: BW_PASSWORD\n});\n\nconst controller = new ApiController(client);\n\nconst accountId = BW_ACCOUNT_ID;\nconst sessionId = \"75c21163-e110-41bc-bd76-1bb428ec85d5\"\nconst participantId = \"320e2af6-13ec-498d-8b51-daba52c37853\"\n\nconst getParticipantSubscriptions = async function() {\n  try {\n    const response = await controller.getParticipantSubscriptions(accountId, sessionId, participantId)\n    console.log(response.body);\n  } catch(error) {\n    console.error(error);\n  }\n}\n\ngetParticipantSubscriptions();\n"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n\nrequire \"vendor/autoload.php\";\n\napi-username = \"api-username\";\napi-password = \"api-pasword\";\n12345 = \"12345\";\n\n$config = new BandwidthLib\\Configuration(\n    array(\n        'webRtcBasicAuthUserName' => $BW_USERNAME,\n        'webRtcBasicAuthPassword' => $BW_PASSWORD,\n    )\n);\n$client = new BandwidthLib\\BandwidthClient($config);\n\n$webRtcClient = $client->getWebRtc()->getClient();\n\n$participantId = \"1234-abcd\";\n$sessionId = \"4321-dcba\";\n\ntry {\n    $response = $webRtcClient->getParticipantSubscriptions($BW_ACCOUNT_ID, $sessionId, $participantId);\n    print_r($response->getResult());\n} catch (BandwidthLib\\APIException $e) {\n    print_r($e->getResponseCode());\n}\n"
                    },
                    {
                        "lang": "Python",
                        "source": "from bandwidth.bandwidth_client import BandwidthClient\nfrom bandwidth.exceptions.api_exception import APIException\n\nimport os\n\nBW_USERNAME = \"api-username\"\nBW_PASSWORD = \"api-password\"\nBW_ACCOUNT_ID = \"12345\"\n\nbandwidth_client = BandwidthClient(\n    web_rtc_basic_auth_user_name=BW_USERNAME,\n    web_rtc_basic_auth_password=BW_PASSWORD\n)\n\nweb_rtc_client = bandwidth_client.web_rtc_client.client\n\nparticipant_id = \"1234-abcd\"\nsession_id = \"4321-dcba\"\n\ntry:\n    response = web_rtc_client.get_participant_subscriptions(BW_ACCOUNT_ID, session_id, participant_id)\n    print(response.body)\nexcept APIException as e:\n    print(e.response_code)\n"
                    },
                    {
                        "lang": "Ruby",
                        "source": "require 'bandwidth'\n\ninclude Bandwidth\ninclude Bandwidth::WebRtc\n\nBW_USERNAME = \"api-username\"\nBW_PASSWORD = \"api-password\"\nBW_ACCOUNT_ID = \"12345\"\n\nbandwidth_client = Bandwidth::Client.new(\n    web_rtc_basic_auth_user_name: BW_USERNAME,\n    web_rtc_basic_auth_password: BW_PASSWORD\n)\n\nweb_rtc_client = bandwidth_client.web_rtc_client.client\n\nparticipant_id = \"1234-abcd\"\nsession_id = \"4321-dcba\"\n\nbegin\n    response = web_rtc_client.get_participant_subscriptions(BW_ACCOUNT_ID, session_id, participant_id)\n    puts response.data\nrescue APIException => e\n    puts e.response_code\nend\n"
                    }
                ]
            },
            "put": {
                "tags": [
                    "Sessions"
                ],
                "summary": "Update Participant Subscriptions",
                "description": "Update a participant's subscriptions.\n\nThis is a full update that will replace the participant's subscriptions. First call `getParticipantSubscriptions` if you need the current subscriptions. Call this function with no `Subscriptions` object to remove all subscriptions.\n",
                "operationId": "updateParticipantSubscriptions",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "description": "Account ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "sessionId",
                        "in": "path",
                        "description": "Session ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "participantId",
                        "in": "path",
                        "description": "Participant ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Initial state",
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Subscriptions"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Access Denied"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "default": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "source": "curl 'https://api.webrtc.bandwidth.com/v1/accounts/12345/sessions/75c21163-e110-41bc-bd76-1bb428ec85d5/participants/568749d5-04d5-483d-adf5-deac7dd3d521/subscriptions' \\\n    -X PUT \\\n    -H 'Authorization: Basic dXNlcm5hbWU6cGFzc3dvcmQ=' \\\n    -H 'Content-Type: application/json' \\\n    -d '{\n        \"sessionId\": \"d8886aad-b956-4e1b-b2f4-d7c9f8162772\",\n        \"participants\": [\n            {\n                \"participantId\": \"568749d5-04d5-483d-adf5-deac7dd3d521\"\n            },\n            {\n                \"participantId\": \"0275e47f-dd21-4cf0-a1e1-dfdc719e73a7\"\n            }\n        ]\n    }'\n"
                    },
                    {
                        "lang": "C#",
                        "source": "using System;\nusing System.Threading.Tasks;\nusing Bandwidth.Standard;\nusing Bandwidth.Standard.Exceptions;\nusing Bandwidth.Standard.WebRtc.Models;\n\nclass Program\n{\n    static async Task Main(string[] args)\n    {\n        var username = \"api-username\";\n        var password = \"api-pasword\";\n        var accountId = \"12345\";\n\n        var sessionId = \"75c21163-e110-41bc-bd76-1bb428ec85d5\"; // Returned via WebRTC's create session request.\n        var participantId = \"568749d5-04d5-483d-adf5-deac7dd3d521\"; // Returned via WebRTC's create participant request.\n\n        var client = new BandwidthClient.Builder()\n            .WebRtcBasicAuthCredentials(username, password)\n            .Build();\n\n        var subscriptions = new Subscriptions()\n        {\n            SessionId = sessionId\n        };\n\n        try\n        {\n            await client.WebRtc.APIController.UpdateParticipantSubscriptionsAsync(accountId, sessionId, participantId, subscriptions);\n        }\n        catch (ApiException e)\n        {\n            Console.WriteLine(e.Message);\n        }\n    }\n}\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import com.bandwidth.BandwidthClient;\nimport com.bandwidth.http.response.ApiResponse;\nimport com.bandwidth.webrtc.models.Subscriptions;\n\nimport java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.ExecutionException;\n\npublic class Sample {\n    public static final String USERNAME = \"api-username\";\n    public static final String PASSWORD = \"api-password\";\n    public static final String ACCOUNT_ID = \"12345\";\n\n    public static void main(String[] args) {\n        String sessionId = \"75c21163-e110-41bc-bd76-1bb428ec85d5\";\n        String participantId = \"568749d5-04d5-483d-adf5-deac7dd3d521\";\n\n        BandwidthClient client = new BandwidthClient.Builder()\n                .webRtcBasicAuthCredentials(USERNAME, PASSWORD)\n                .build();\n\n        Subscriptions subscriptions = new Subscriptions();\n        subscriptions.setSessionId(sessionId);\n\n        try {\n            CompletableFuture<ApiResponse<Void>> completableFuture = client.getWebRtcClient().getAPIController().updateParticipantSubscriptionsAsync(ACCOUNT_ID, sessionId, participantId, subscriptions);\n            System.out.println(completableFuture.get().getResult());\n        } catch (InterruptedException | ExecutionException e) {\n            System.out.println(e.getMessage());\n        }\n    }\n}\n"
                    },
                    {
                        "lang": "Node.js",
                        "source": "import { Client, ApiController } from '@bandwidth/webrtc';\n\nconst BW_USERNAME = \"api-username\";\nconst BW_PASSWORD = \"api-password\";\nconst BW_ACCOUNT_ID = \"12345\";\n\nconst client = new Client({\n  basicAuthUserName: BW_USERNAME,\n  basicAuthPassword: BW_PASSWORD\n});\n\nconst controller = new ApiController(client);\n\nconst accountId = BW_ACCOUNT_ID;\nconst sessionId = \"75c21163-e110-41bc-bd76-1bb428ec85d5\"\nconst participantId = \"320e2af6-13ec-498d-8b51-daba52c37853\"\nconst body = {  \"sessionId\": \"75c21163-e110-41bc-bd76-1bb428ec85d5\",\n                \"participants\": [{\n                    \"participantId\": \"568749d5-04d5-483d-adf5-deac7dd3d521\"\n                  }, {\n                    \"participantId\": \"0275e47f-dd21-4cf0-a1e1-dfdc719e73a7\"\n                  }]\n              }\n\nconst updateParticipantSubscriptions = async function() {\n  try {\n    const response = await controller.updateParticipantSubscriptions(accountId, sessionId, participantId, body)\n    console.log(response.body);\n  } catch(error) {\n    console.error(error);\n  }\n}\n\nupdateParticipantSubscriptions();\n"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\n  \nrequire \"vendor/autoload.php\";\n\napi-username = \"api-username\";\napi-password = \"api-pasword\";\n12345 = \"12345\";\n\n$config = new BandwidthLib\\Configuration(\n    array(\n        'webRtcBasicAuthUserName' => $BW_USERNAME,\n        'webRtcBasicAuthPassword' => $BW_PASSWORD,\n    )\n);\n$client = new BandwidthLib\\BandwidthClient($config);\n\n$webRtcClient = $client->getWebRtc()->getClient();\n\n$body = new BandwidthLib\\WebRtc\\Models\\Subscriptions();\n$body->sessionId = \"1234-abcd\";\n\n$sessionId = \"1234-abcd\";\n$participantId = \"4321-dcba\";\n\ntry {\n    $webRtcClient->updateParticipantSubscriptions($BW_ACCOUNT_ID, $sessionId, $participantId, $body);\n} catch (BandwidthLib\\APIException $e) {\n    print_r($e->getResponseCode());\n}\n"
                    },
                    {
                        "lang": "Python",
                        "source": "from bandwidth.bandwidth_client import BandwidthClient\nfrom bandwidth.exceptions.api_exception import APIException\nfrom bandwidth.webrtc.models.subscriptions import Subscriptions\n\nimport os\n\nBW_USERNAME = \"api-username\"\nBW_PASSWORD = \"api-password\"\nBW_ACCOUNT_ID = \"12345\"\n\nbandwidth_client = BandwidthClient(\n    web_rtc_basic_auth_user_name=BW_USERNAME,\n    web_rtc_basic_auth_password=BW_PASSWORD\n)\n\nweb_rtc_client = bandwidth_client.web_rtc_client.client\n\nbody = Subscriptions()\nbody.session_id = \"1234-abcd\"\n\nsession_id = \"1234-abcd\"\nparticipant_id = \"4321-dcba\"\n\ntry:\n    web_rtc_client.update_participant_subscriptions(BW_ACCOUNT_ID, session_id, participant_id, body)\nexcept APIException as e:\n    print(e.response_code)\n"
                    },
                    {
                        "lang": "Ruby",
                        "source": "require 'bandwidth'\n\ninclude Bandwidth\ninclude Bandwidth::WebRtc\n\nBW_USERNAME = \"api-username\"\nBW_PASSWORD = \"api-password\"\nBW_ACCOUNT_ID = \"12345\"\n\nbandwidth_client = Bandwidth::Client.new(\n    web_rtc_basic_auth_user_name: BW_USERNAME,\n    web_rtc_basic_auth_password: BW_PASSWORD\n)\n\nweb_rtc_client = bandwidth_client.web_rtc_client.client\n\nbody = Subscriptions.new\nbody.session_id = \"1234-abcd\"\n\nsession_id = \"1234-abcd\"\nparticipant_id = \"4321-dcba\"\n\nbegin\n    web_rtc_client.update_participant_subscriptions(BW_ACCOUNT_ID, session_id, participant_id, :body => body)\n    #NOTE: This is currently improperly defined\nrescue APIException => e\n    puts e.response_code\nend\n\n"
                    }
                ]
            }
        }
    },
    "components": {
        "schemas": {
            "Session": {
                "type": "object",
                "description": "A session object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Unique id of the session",
                        "example": "75c21163-e110-41bc-bd76-1bb428ec85d5",
                        "readOnly": true
                    },
                    "tag": {
                        "type": "string",
                        "description": "User defined tag to associate with the session",
                        "example": "session1"
                    }
                }
            },
            "Participant": {
                "type": "object",
                "description": "A participant object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Unique id of the participant",
                        "readOnly": true,
                        "example": "320e2af6-13ec-498d-8b51-daba52c37853"
                    },
                    "callbackUrl": {
                        "type": "string",
                        "nullable": true,
                        "description": "Full callback url to use for notifications about this participant",
                        "example": "https://example.com/callback"
                    },
                    "publishPermissions": {
                        "type": "array",
                        "description": "Defines if this participant can publish audio or video",
                        "example": [
                            "VIDEO",
                            "AUDIO"
                        ],
                        "uniqueItems": true,
                        "items": {
                            "type": "string",
                            "enum": [
                                "AUDIO",
                                "VIDEO"
                            ]
                        }
                    },
                    "sessions": {
                        "type": "array",
                        "description": "List of session ids this participant is associated with\n\nCapped to one\n\nUpon creation of a Participant, returns as an empty array",
                        "example": [
                            "75c21163-e110-41bc-bd76-1bb428ec85d5"
                        ],
                        "readOnly": true,
                        "items": {
                            "type": "string"
                        }
                    },
                    "subscriptions": {
                        "$ref": "#/components/schemas/Subscriptions"
                    },
                    "tag": {
                        "type": "string",
                        "description": "User defined tag to associate with the participant",
                        "example": "participant1"
                    },
                    "deviceApiVersion": {
                        "type": "string",
                        "description": "Optional field to define the device api version of this participant",
                        "example": "V3",
                        "default": "V2",
                        "enum": [
                            "V3",
                            "V2"
                        ]
                    }
                }
            },
            "CreateParticipantResponse": {
                "type": "object",
                "description": "Response generated when a Participant is created",
                "properties": {
                    "participant": {
                        "$ref": "#/components/schemas/Participant"
                    },
                    "token": {
                        "type": "string",
                        "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwiaWF0IjoxNTE2MjM5MDIyfQ.L8i6g3PfcHlioHCCPURC9pmXT7gdJpx3kOoyAfNUwCc",
                        "description": "Auth token for the returned participant\n\nThis should be passed to the participant so that they can connect to the platform\n"
                    }
                }
            },
            "CreateParticipantRequest": {
                "type": "object",
                "description": "Create a participant object",
                "properties": {
                    "callbackUrl": {
                        "type": "string",
                        "nullable": true,
                        "description": "Full callback url to use for notifications about this participant",
                        "example": "https://example.com/callback"
                    },
                    "publishPermissions": {
                        "type": "array",
                        "description": "Defines if this participant can publish audio or video",
                        "example": [
                            "VIDEO",
                            "AUDIO"
                        ],
                        "uniqueItems": true,
                        "items": {
                            "type": "string",
                            "enum": [
                                "AUDIO",
                                "VIDEO"
                            ]
                        }
                    },
                    "tag": {
                        "type": "string",
                        "description": "User defined tag to associate with the participant",
                        "example": "participant1"
                    },
                    "deviceApiVersion": {
                        "type": "string",
                        "description": "Optional field to define the device api version of this participant",
                        "example": "V3",
                        "default": "V2",
                        "enum": [
                            "V3",
                            "V2"
                        ]
                    }
                }
            },
            "Subscriptions": {
                "type": "object",
                "readOnly": true,
                "required": [
                    "sessionId"
                ],
                "properties": {
                    "sessionId": {
                        "type": "string",
                        "description": "Session the subscriptions are associated with\n\nIf this is the only field, the subscriber will be subscribed to all participants in the session (including any participants that are later added to the session)\n\nUpon creation of a Participant, returns as an empty object",
                        "example": "d8886aad-b956-4e1b-b2f4-d7c9f8162772"
                    },
                    "participants": {
                        "type": "array",
                        "description": "Subset of participants to subscribe to in the session. Optional.\n\nReturns empty upon creation of a Participant",
                        "example": [
                            {
                                "participantId": "568749d5-04d5-483d-adf5-deac7dd3d521"
                            },
                            {
                                "participantId": "0275e47f-dd21-4cf0-a1e1-dfdc719e73a7"
                            }
                        ],
                        "items": {
                            "$ref": "#/components/schemas/ParticipantSubscription"
                        }
                    }
                }
            },
            "ParticipantSubscription": {
                "type": "object",
                "required": [
                    "participantId"
                ],
                "properties": {
                    "participantId": {
                        "type": "string",
                        "description": "Participant the subscriber should be subscribed to",
                        "example": "568749d5-04d5-483d-adf5-deac7dd3d521"
                    },
                    "streamAliases": {
                        "type": "array",
                        "description": "Stream aliases of the participant the subscriber should be subscribed to.\nThe streamAlias values are created by the client representing the Participant that is being subscribed to when that client connects to the system.  The client is responsible for informing the application of the valid values.\nSubscribing to a streamAlias that does not exist is undefined\nIf empty all aliases are assumed",
                        "example": [
                            "alias_1",
                            "alias_2"
                        ],
                        "uniqueItems": true,
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "Error": {
                "type": "object",
                "required": [
                    "code",
                    "message"
                ],
                "properties": {
                    "code": {
                        "type": "integer",
                        "format": "int32",
                        "example": 500
                    },
                    "message": {
                        "type": "string",
                        "example": "There was an unexpected error"
                    }
                }
            }
        },
        "securitySchemes": {
            "basicAuth": {
                "type": "http",
                "scheme": "basic"
            },
            "token": {
                "type": "http",
                "scheme": "bearer",
                "bearerFormat": "JWT"
            }
        }
    },
    "security": [
        {
            "basicAuth": []
        },
        {
            "token": []
        }
    ]
}