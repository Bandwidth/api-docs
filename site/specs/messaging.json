{
    "openapi": "3.0.0",
    "info": {
        "title": "Messaging",
        "description": "Bandwidth's HTTP Messaging platform\n## Base Path\n<code>https://messaging.bandwidth.com/api/v2</code>",
        "contact": {},
        "version": "4.2.8",
        "x-server-configuration": {
            "default-environment": "production",
            "default-server": "default",
            "environments": [
                {
                    "name": "production",
                    "servers": [
                        {
                            "name": "default",
                            "url": "https://messaging.bandwidth.com/api/v2"
                        }
                    ]
                },
                {
                    "name": "custom",
                    "servers": [
                        {
                            "name": "default",
                            "url": "{base_url}"
                        }
                    ]
                }
            ],
            "parameters": [
                {
                    "name": "base_url",
                    "description": "",
                    "type": "string",
                    "example": "https://www.example.com"
                }
            ]
        }
    },
    "servers": [
        {
            "url": "https://messaging.bandwidth.com/api/v2",
            "variables": {}
        }
    ],
    "paths": {
        "/users/{accountId}/media": {
            "get": {
                "tags": [
                    "Media"
                ],
                "summary": "List Media",
                "description": "Gets a list of your media files. No query parameters are supported.",
                "operationId": "ListMedia",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "description": "User's account ID",
                        "example": "900000",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "Continuation-Token",
                        "in": "header",
                        "style": "simple",
                        "explode": false,
                        "description": "Continuation token used to retrieve subsequent media.",
                        "example": "12345",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "headers": {
                            "Continuation-Token": {
                                "description": "Continuation token used to retrieve subsequent media.",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Media"
                                    },
                                    "description": "successful operation"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "415": {
                        "$ref": "#/components/responses/InvalidMediaType"
                    },
                    "429": {
                        "$ref": "#/components/responses/TooManyRequests"
                    }
                },
                "deprecated": false,
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "source": "curl 'https://messaging.bandwidth.com/api/v2/users/12345/media' \\\r\n    -H 'Authorization: Basic dXNlcm5hbWU6cGFzc3dvcmQ='\r\n"
                    },
                    {
                        "lang": "C#",
                        "source": "using System;\r\nusing System.Threading.Tasks;\r\nusing Bandwidth.Standard;\r\nusing Bandwidth.Standard.Exceptions;\r\nusing Bandwidth.Standard.Messaging.Models;\r\n\r\nclass Program\r\n{\r\n    static async Task Main(string[] args)\r\n    {\r\n        var username = \"api-username\";\r\n        var password = \"api-pasword\";\r\n        var accountId = \"12345\";\r\n\r\n        var client = new BandwidthClient.Builder()\r\n            .MessagingBasicAuthCredentials(username, password)\r\n            .Build();\r\n\r\n        try\r\n        {\r\n            var response = await client.Messaging.APIController.ListMediaAsync(accountId);\r\n            Console.WriteLine(response.Data);\r\n        }\r\n        catch (ApiException e)\r\n        {\r\n            Console.WriteLine(e.Message);\r\n        }\r\n    }\r\n}\r\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import com.bandwidth.BandwidthClient;\r\nimport com.bandwidth.http.response.ApiResponse;\r\nimport com.bandwidth.messaging.models.Media;\r\n\r\nimport java.util.concurrent.CompletableFuture;\r\nimport java.util.concurrent.ExecutionException;\r\nimport java.util.List;\r\n\r\npublic class Sample {\r\n    public static final String USERNAME = \"api-username\";\r\n    public static final String PASSWORD = \"api-password\";\r\n    public static final String ACCOUNT_ID = \"12345\";\r\n\r\n    public static void main(String[] args) {\r\n        BandwidthClient client = new BandwidthClient.Builder()\r\n                .messagingBasicAuthCredentials(USERNAME, PASSWORD)\r\n                .build();\r\n\r\n        try {\r\n            CompletableFuture<ApiResponse<List<Media>>> completableFuture = client.getMessagingClient().getAPIController().listMediaAsync(ACCOUNT_ID, null);\r\n            System.out.println(completableFuture.get().getResult());\r\n        } catch (InterruptedException | ExecutionException e) {\r\n            System.out.println(e.getMessage());\r\n        }\r\n    }\r\n}\r\n"
                    },
                    {
                        "lang": "Node.js",
                        "source": "import { Client, ApiController } from '@bandwidth/messaging';\r\nimport * as fs from 'fs';\r\n\r\nconst BW_USERNAME = \"api-username\";\r\nconst BW_PASSWORD = \"api-password\";\r\nconst BW_ACCOUNT_ID = \"12345\";\r\n\r\nconst client = new Client({\r\n  basicAuthUserName: BW_USERNAME,\r\n  basicAuthPassword: BW_PASSWORD\r\n});\r\n\r\nconst controller = new ApiController(client);\r\n\r\nconst listMedia = async function() {\r\n  try {\r\n    const response = await controller.listMedia(BW_ACCOUNT_ID);\r\n    console.log(response.result)\r\n  } catch (error) {\r\n  console.error(error);\r\n}};\r\n\r\nlistMedia();\r\n"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\r\n\r\nrequire \"vendor/autoload.php\";\r\n\r\napi-username = \"api-username\";\r\napi-password = \"api-pasword\";\r\n12345 = \"12345\";\r\n\r\n$config = new BandwidthLib\\Configuration(\r\n    array(\r\n        'messagingBasicAuthUserName' => $BW_USERNAME,\r\n        'messagingBasicAuthPassword' => $BW_PASSWORD,\r\n    )\r\n);\r\n$client = new BandwidthLib\\BandwidthClient($config);\r\n\r\n$messagingClient = $client->getMessaging()->getClient();\r\n\r\ntry {\r\n    $response = $messagingClient->listMedia($BW_ACCOUNT_ID);\r\n    if (count($response->getResult()) > 0) {\r\n        print_r($response->getResult()[0]->mediaName);\r\n    }\r\n} catch (BandwidthLib\\APIException $e) {\r\n    print_r($e->getResponseCode());\r\n}\r\n"
                    },
                    {
                        "lang": "Python",
                        "source": "from bandwidth.bandwidth_client import BandwidthClient\r\nfrom bandwidth.exceptions.api_exception import APIException\r\n\r\nimport os\r\n\r\nBW_USERNAME = \"api-username\"\r\nBW_PASSWORD = \"api-password\"\r\nBW_ACCOUNT_ID = \"12345\"\r\n\r\nbandwidth_client = BandwidthClient(\r\n    messaging_basic_auth_user_name=BW_USERNAME,\r\n    messaging_basic_auth_password=BW_PASSWORD\r\n)\r\nmessaging_client = bandwidth_client.messaging_client.client\r\n\r\ntry:\r\n    response = messaging_client.list_media(BW_ACCOUNT_ID)\r\n    print(response.body)\r\nexcept APIException as e:\r\n    print(e.response_code)\r\n"
                    },
                    {
                        "lang": "Ruby",
                        "source": "require 'bandwidth'\r\n\r\ninclude Bandwidth\r\ninclude Bandwidth::Messaging\r\n\r\nbandwidth_client = Bandwidth::Client.new(\r\n    messaging_basic_auth_user_name: \"api-username\",\r\n    messaging_basic_auth_password: \"api-password\"\r\n)\r\nmessaging_client = bandwidth_client.messaging_client.client\r\n\r\nbegin\r\n  media = messaging_client.list_media(\"12345\")\r\n  media.data.each { |item|\r\n    puts item.media_name\r\n  }\r\nrescue APIException => e\r\n  puts e.response_code\r\nend\r\n"
                    }
                ]
            }
        },
        "/users/{accountId}/media/{mediaId}": {
            "get": {
                "tags": [
                    "Media"
                ],
                "summary": "Get Media",
                "description": "Downloads a media file you previously uploaded.",
                "operationId": "GetMedia",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "description": "User's account ID",
                        "example": "900000",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "mediaId",
                        "in": "path",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "description": "Media ID to retrieve",
                        "example": "0a610655-ba58",
                        "schema": {
                            "pattern": ".+",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "headers": {},
                        "content": {
                            "application/octet-stream": {
                                "schema": {
                                    "type": "string",
                                    "description": "successful operation",
                                    "format": "binary"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "415": {
                        "$ref": "#/components/responses/InvalidMediaType"
                    },
                    "429": {
                        "$ref": "#/components/responses/TooManyRequests"
                    }
                },
                "deprecated": false,
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "source": "curl 'https://messaging.bandwidth.com/api/v2/users/12345/media/media-id-123' \\\r\n    -H 'Authorization: Basic dXNlcm5hbWU6cGFzc3dvcmQ='\r\n"
                    },
                    {
                        "lang": "C#",
                        "source": "using System;\r\nusing System.Threading.Tasks;\r\nusing Bandwidth.Standard;\r\nusing Bandwidth.Standard.Exceptions;\r\nusing Bandwidth.Standard.Messaging.Models;\r\n\r\nclass Program\r\n{\r\n    static async Task Main(string[] args)\r\n    {\r\n        var username = \"api-username\";\r\n        var password = \"api-pasword\";\r\n        var accountId = \"12345\";\r\n\r\n        var client = new BandwidthClient.Builder()\r\n            .MessagingBasicAuthCredentials(username, password)\r\n            .Build();\r\n\r\n        var mediaId = \"media-id-123\";\r\n\r\n        try\r\n        {\r\n            var response = await client.Messaging.APIController.GetMediaAsync(accountId, mediaId);\r\n            Console.WriteLine(response.Data);\r\n        }\r\n        catch (ApiException e)\r\n        {\r\n            Console.WriteLine(e.Message);\r\n        }\r\n    }\r\n}\r\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import com.bandwidth.BandwidthClient;\r\nimport com.bandwidth.http.response.ApiResponse;\r\n\r\nimport java.util.concurrent.CompletableFuture;\r\nimport java.util.concurrent.ExecutionException;\r\nimport java.io.InputStream;\r\n\r\npublic class Sample {\r\n    public static final String USERNAME = \"api-username\";\r\n    public static final String PASSWORD = \"api-password\";\r\n    public static final String ACCOUNT_ID = \"12345\";\r\n\r\n    public static void main(String[] args) {\r\n        String mediaId = \"media-id-123\";\r\n\r\n        BandwidthClient client = new BandwidthClient.Builder()\r\n                .messagingBasicAuthCredentials(USERNAME, PASSWORD)\r\n                .build();\r\n\r\n        try {\r\n            CompletableFuture<ApiResponse<InputStream>> completableFuture = client.getMessagingClient().getAPIController().getMediaAsync(ACCOUNT_ID, mediaId);\r\n            System.out.println(completableFuture.get().getResult());\r\n        } catch (InterruptedException | ExecutionException e) {\r\n            System.out.println(e.getMessage());\r\n        }\r\n    }\r\n}\r\n"
                    },
                    {
                        "lang": "Node.js",
                        "source": "import { Client, ApiController } from '@bandwidth/messaging';\r\nimport * as fs from 'fs';\r\n\r\nconst BW_USERNAME = \"api-username\";\r\nconst BW_PASSWORD = \"api-password\";\r\nconst BW_ACCOUNT_ID = \"12345\";\r\nconst mediaId = \"abc123.pdf\";\r\n\r\nconst client = new Client({\r\n  basicAuthUserName: BW_USERNAME,\r\n  basicAuthPassword: BW_PASSWORD\r\n});\r\n\r\nconst controller = new ApiController(client);\r\n\r\nconst getMedia = async function() {\r\n  try {\r\n    const response = await controller.getMedia(BW_ACCOUNT_ID, mediaId);\r\n    const chunks = [];\r\n    for await (let chunk of response.result) {\r\n        chunks.push(chunk);\r\n    }\r\n    fs.writeFileSync('file-to-write.pdf', chunks[0], 'binary');\r\n  } catch (error) {\r\n  console.error(error);\r\n}};\r\n\r\ngetMedia();\r\n"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\r\n\r\nrequire \"vendor/autoload.php\";\r\n\r\napi-username = \"api-username\";\r\napi-password = \"api-pasword\";\r\n12345 = \"12345\";\r\n\r\n$config = new BandwidthLib\\Configuration(\r\n    array(\r\n        'messagingBasicAuthUserName' => $BW_USERNAME,\r\n        'messagingBasicAuthPassword' => $BW_PASSWORD,\r\n    )\r\n);\r\n$client = new BandwidthLib\\BandwidthClient($config);\r\n\r\n$messagingClient = $client->getMessaging()->getClient();\r\n\r\n$mediaFileName = \"sample_media_file\";\r\n\r\ntry {\r\n    $response = $messagingClient->getMedia($BW_ACCOUNT_ID, $mediaFileName);\r\n    $downloadedMediaFile = $response->getResult();\r\n} catch (BandwidthLib\\APIException $e) {\r\n    print_r($e->getResponseCode());\r\n}\r\n"
                    },
                    {
                        "lang": "Python",
                        "source": "from bandwidth.bandwidth_client import BandwidthClient\r\nfrom bandwidth.exceptions.api_exception import APIException\r\n  \r\nimport os\r\n\r\nBW_USERNAME = \"api-username\"\r\nBW_PASSWORD = \"api-password\"\r\nBW_ACCOUNT_ID = \"12345\"\r\n\r\nbandwidth_client = BandwidthClient(\r\n    messaging_basic_auth_user_name=BW_USERNAME,\r\n    messaging_basic_auth_password=BW_PASSWORD\r\n)\r\nmessaging_client = bandwidth_client.messaging_client.client\r\n\r\nmedia_file_name = 'sample_file_name'\r\n\r\ntry:\r\n    response = messaging_client.get_media(BW_ACCOUNT_ID, media_file_name)\r\n    downloaded_media_file = response.body\r\nexcept APIException as e:\r\n    print(e.response_code)\r\n"
                    },
                    {
                        "lang": "Ruby",
                        "source": "require 'bandwidth'\r\n\r\ninclude Bandwidth\r\ninclude Bandwidth::Messaging\r\n\r\nbandwidth_client = Bandwidth::Client.new(\r\n    messaging_basic_auth_user_name: \"api-username\",\r\n    messaging_basic_auth_password: \"api-password\"\r\n)\r\nmessaging_client = bandwidth_client.messaging_client.client\r\n\r\nbegin\r\n  downloaded_media = messaging_client.get_media(\"12345\", ENV['MEDIA_ID'])\r\n  f = File.open(\"file_to_write\", \"wb\")\r\n  f.puts(downloaded_media.data)\r\n  f.close()\r\nrescue APIException => e\r\n  puts e.response_code\r\nend\r\n"
                    }
                ]
            },
            "put": {
                "tags": [
                    "Media"
                ],
                "summary": "Upload Media",
                "description": "Uploads a file the normal HTTP way. You may add headers to the request in order to provide some control to your media-file.",
                "operationId": "UploadMedia",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "description": "User's account ID",
                        "example": "900000",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "mediaId",
                        "in": "path",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "description": "The user supplied custom media ID",
                        "example": "my-media-id",
                        "schema": {
                            "pattern": ".+",
                            "type": "string"
                        }
                    },
                    {
                        "name": "Content-Type",
                        "in": "header",
                        "style": "simple",
                        "explode": false,
                        "description": "The media type of the entity-body",
                        "example": "audio/wav",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "Cache-Control",
                        "in": "header",
                        "style": "simple",
                        "explode": false,
                        "description": "General-header field is used to specify directives that MUST be obeyed by all caching mechanisms along the request/response chain.",
                        "example": "no-cache",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "x-send-file-in-body": true,
                    "content": {
                        "application/octet-stream": {
                            "schema": {
                                "type": "string",
                                "format": "binary"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "successful operation",
                        "headers": {}
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "415": {
                        "$ref": "#/components/responses/InvalidMediaType"
                    },
                    "429": {
                        "$ref": "#/components/responses/TooManyRequests"
                    }
                },
                "deprecated": false,
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "source": "curl 'https://messaging.bandwidth.com/api/v2/users/12345/media/media-id-123' \\\r\n    -X PUT \\\r\n    -H 'Authorization: Basic dXNlcm5hbWU6cGFzc3dvcmQ='\r\n"
                    },
                    {
                        "lang": "C#",
                        "source": "using System;\r\nusing System.IO;\r\nusing System.Text;\r\nusing System.Threading.Tasks;\r\nusing Bandwidth.Standard;\r\nusing Bandwidth.Standard.Exceptions;\r\nusing Bandwidth.Standard.Http.Client;\r\n\r\nclass Program\r\n{\r\n    static async Task Main(string[] args)\r\n    {\r\n        var username = \"api-username\";\r\n        var password = \"api-pasword\";\r\n        var accountId = \"12345\";\r\n\r\n        var client = new BandwidthClient.Builder()\r\n            .MessagingBasicAuthCredentials(username, password)\r\n            .Build();\r\n\r\n        var mediaId = \"media-id-123\";\r\n                    \r\n        var content = \"Hello world\";\r\n        var contentType = \"text/plain\";\r\n\r\n        var memoryStream = new MemoryStream(Encoding.UTF8.GetBytes(content));\r\n        var fileStreamInfo = new FileStreamInfo(memoryStream);\r\n\r\n        try\r\n        {\r\n            await client.Messaging.APIController.UploadMediaAsync(accountId, mediaId, fileStreamInfo, contentType);\r\n        }\r\n        catch (ApiException e)\r\n        {\r\n            Console.WriteLine(e.Message);\r\n        }\r\n    }\r\n}\r\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import com.bandwidth.BandwidthClient;\r\nimport com.bandwidth.http.response.ApiResponse;\r\nimport com.bandwidth.utilities.FileWrapper;\r\n\r\nimport java.io.File;\r\nimport java.util.concurrent.CompletableFuture;\r\nimport java.util.concurrent.ExecutionException;\r\n\r\npublic class Sample {\r\n    public static final String USERNAME = \"api-username\";\r\n    public static final String PASSWORD = \"api-password\";\r\n    public static final String ACCOUNT_ID = \"12345\";\r\n\r\n    public static void main(String[] args) {\r\n        BandwidthClient client = new BandwidthClient.Builder()\r\n                .messagingBasicAuthCredentials(USERNAME, PASSWORD)\r\n                .build();\r\n\r\n        String mediaId = \"media-id-123\";\r\n        FileWrapper fileWrapper = new FileWrapper(new File(\"/path/to/file\"));\r\n\r\n        try {\r\n            CompletableFuture<ApiResponse<Void>> completableFuture = client.getMessagingClient().getAPIController().uploadMediaAsync(ACCOUNT_ID, mediaId, fileWrapper, \"content/type\", \"no-cache\");\r\n            System.out.println(completableFuture.get().getResult());\r\n        } catch (InterruptedException | ExecutionException e) {\r\n            System.out.println(e.getMessage());\r\n        }\r\n    }\r\n}\r\n"
                    },
                    {
                        "lang": "Node.js",
                        "source": "import { Client, ApiController, Environment } from '@bandwidth/messaging';\r\nimport * as fs from 'fs';\r\n\r\nconst BW_USERNAME = \"api-username\";\r\nconst BW_PASSWORD = \"api-password\";\r\nconst BW_ACCOUNT_ID = \"12345\";\r\nconst mediaId = \"abc123.pdf\";\r\nconst contentType = \"application/octet-stream\";\r\nconst cacheControl = \"no-cache\";\r\nconst contents = Buffer.alloc(8); // Any binary string will work for the upload. This includes file contents\r\n\r\nconst client = new Client({\r\n  basicAuthUserName: BW_USERNAME,\r\n  basicAuthPassword: BW_PASSWORD,\r\n});\r\n\r\nconst controller = new ApiController(client);\r\n\r\nconst uploadMedia = async function() {\r\n  try {\r\n    const response = await controller.uploadMedia(BW_ACCOUNT_ID, mediaId, contents, contentType, cacheControl);\r\n    console.log(response.statusCode)\r\n  } catch (error) {\r\n  console.error(error);\r\n}};\r\n\r\nuploadMedia();\r\n"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\r\n\r\nrequire \"vendor/autoload.php\";\r\n\r\napi-username = \"api-username\";\r\napi-password = \"api-pasword\";\r\n12345 = \"12345\";\r\n\r\n$config = new BandwidthLib\\Configuration(\r\n    array(\r\n        'messagingBasicAuthUserName' => $BW_USERNAME,\r\n        'messagingBasicAuthPassword' => $BW_PASSWORD,\r\n    )\r\n);\r\n$client = new BandwidthLib\\BandwidthClient($config);\r\n\r\n$messagingClient = $client->getMessaging()->getClient();\r\n\r\n$mediaFileName = \"sample_file_name\";\r\n$mediaFile = \"12345\"; //Any binary string will work for the upload. This includes file contents\r\n\r\ntry {\r\n    $messagingClient->uploadMedia($BW_ACCOUNT_ID, $mediaFileName, $mediaFile);\r\n} catch (BandwidthLib\\APIException $e) {\r\n    print_r($e->getResponseCode());\r\n}\r\n"
                    },
                    {
                        "lang": "Python",
                        "source": "from bandwidth.bandwidth_client import BandwidthClient\r\nfrom bandwidth.exceptions.api_exception import APIException\r\n\r\nimport os\r\n\r\nBW_USERNAME = \"api-username\"\r\nBW_PASSWORD = \"api-password\"\r\nBW_ACCOUNT_ID = \"12345\"\r\n\r\nbandwidth_client = BandwidthClient(\r\n    messaging_basic_auth_user_name=BW_USERNAME,\r\n    messaging_basic_auth_password=BW_PASSWORD\r\n)\r\nmessaging_client = bandwidth_client.messaging_client.client\r\n\r\nmedia_file_name = 'sample_file_name'\r\nmedia_file = b'12345' #Any binary string will work for the upload. This includes file contents\r\n\r\ntry:\r\n    messaging_client.upload_media(BW_ACCOUNT_ID, media_file_name, media_file)\r\nexcept APIException as e:\r\n    print(e.response_code)\r\n"
                    },
                    {
                        "lang": "Ruby",
                        "source": "require 'bandwidth'\r\n\r\ninclude Bandwidth\r\ninclude Bandwidth::Messaging\r\n\r\nbandwidth_client = Bandwidth::Client.new(\r\n    messaging_basic_auth_user_name: \"api-username\",\r\n    messaging_basic_auth_password: \"api-password\"\r\n)\r\nmessaging_client = bandwidth_client.messaging_client.client\r\n\r\nbegin\r\n  #f = File.open(\"some_file\", \"rb\")\r\n  #file_content = f.read\r\n  file_content = \"12345\"\r\n  messaging_client.upload_media(\r\n    \"12345\",\r\n    ENV['MEDIA_ID'],\r\n    file_content,\r\n    :content_type => \"application/octet-stream\",\r\n    :cache_control => \"no-cache\"\r\n  )\r\n  f.close()\r\nrescue APIException => e\r\n  puts e.response_code\r\nend\r\n"
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Media"
                ],
                "summary": "Delete Media",
                "description": "Deletes a media file from Bandwidth API server. Make sure you don't have any application scripts still using the media before you delete. If you accidentally delete a media file, you can immediately upload a new file with the same name.",
                "operationId": "DeleteMedia",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "description": "User's account ID",
                        "example": "900000",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "mediaId",
                        "in": "path",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "description": "The media ID to delete",
                        "example": "tjdla-4562ld",
                        "schema": {
                            "pattern": ".+",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "successful operation",
                        "headers": {}
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "415": {
                        "$ref": "#/components/responses/InvalidMediaType"
                    },
                    "429": {
                        "$ref": "#/components/responses/TooManyRequests"
                    }
                },
                "deprecated": false,
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "source": "curl 'https://messaging.bandwidth.com/api/v2/users/12345/media/media-id-123' \\\r\n    -X DELETE \\\r\n    -H 'Authorization: Basic dXNlcm5hbWU6cGFzc3dvcmQ='\r\n"
                    },
                    {
                        "lang": "C#",
                        "source": "using System;\r\nusing System.Threading.Tasks;\r\nusing Bandwidth.Standard;\r\nusing Bandwidth.Standard.Exceptions;\r\nusing Bandwidth.Standard.Messaging.Models;\r\n\r\nclass Program\r\n{\r\n    static async Task Main(string[] args)\r\n    {\r\n        var username = \"api-username\";\r\n        var password = \"api-pasword\";\r\n        var accountId = \"12345\";\r\n\r\n        var client = new BandwidthClient.Builder()\r\n            .MessagingBasicAuthCredentials(username, password)\r\n            .Build();\r\n\r\n        var mediaId = \"media-id-123\";\r\n\r\n        try\r\n        {\r\n            await client.Messaging.APIController.DeleteMediaAsync(accountId, mediaId);\r\n        }\r\n        catch (ApiException e)\r\n        {\r\n            Console.WriteLine(e.Message);\r\n        }\r\n    }\r\n}\r\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import com.bandwidth.BandwidthClient;\r\nimport com.bandwidth.http.response.ApiResponse;\r\nimport com.bandwidth.messaging.models.BandwidthMessage;\r\nimport com.bandwidth.messaging.models.MessageRequest;\r\n\r\nimport java.util.concurrent.CompletableFuture;\r\nimport java.util.concurrent.ExecutionException;\r\nimport java.util.Collections;\r\n\r\npublic class Sample {\r\n    public static final String USERNAME = \"api-username\";\r\n    public static final String PASSWORD = \"api-password\";\r\n    public static final String ACCOUNT_ID = \"12345\";\r\n\r\n    public static void main(String[] args) {\r\n        String mediaId = \"media-id-123\";\r\n\r\n        BandwidthClient client = new BandwidthClient.Builder()\r\n                .messagingBasicAuthCredentials(USERNAME, PASSWORD)\r\n                .build();\r\n\r\n        try {\r\n            CompletableFuture<ApiResponse<Void>> completableFuture = client.getMessagingClient().getAPIController().deleteMediaAsync(ACCOUNT_ID, mediaId);\r\n            System.out.println(completableFuture.get().getResult());\r\n        } catch (InterruptedException | ExecutionException e) {\r\n            System.out.println(e.getMessage());\r\n        }\r\n    }\r\n}\r\n"
                    },
                    {
                        "lang": "Node.js",
                        "source": "import { Client, ApiController } from '@bandwidth/messaging';\r\n\r\nconst BW_USERNAME = \"api-username\";\r\nconst BW_PASSWORD = \"api-password\";\r\nconst BW_ACCOUNT_ID = \"12345\";\r\nconst mediaId = 'abc12345-6def-abc1-2345-6defabc123451.mp3';\r\n\r\nconst client = new Client({\r\n  basicAuthUserName: BW_USERNAME,\r\n  basicAuthPassword: BW_PASSWORD\r\n});\r\n\r\nconst controller = new ApiController(client);\r\n\r\nconst deleteMedia = async function() {\r\n  try {\r\n    const response = await controller.deleteMedia(BW_ACCOUNT_ID, mediaId);\r\n    console.log(response.statusCode);\r\n  } catch (error) {\r\n  console.error(error);\r\n}};\r\n\r\ndeleteMedia();\r\n"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\r\n  \r\nrequire \"vendor/autoload.php\";\r\n\r\napi-username = \"api-username\";\r\napi-password = \"api-pasword\";\r\n12345 = \"12345\";\r\n1234-asdf = \"1234-asdf\";\r\n+15554443333 = \"+15554443333\";\r\n+15553334444 = \"+15553334444\";\r\n\r\n$config = new BandwidthLib\\Configuration(\r\n    array(\r\n        'messagingBasicAuthUserName' => $BW_USERNAME,\r\n        'messagingBasicAuthPassword' => $BW_PASSWORD,\r\n    )\r\n);\r\n$client = new BandwidthLib\\BandwidthClient($config);\r\n\r\n$messagingClient = $client->getMessaging()->getClient();\r\n\r\n$mediaId = \"m-1234\";\r\n\r\ntry {\r\n    $messagingClient->deleteMedia($BW_ACCOUNT_ID, $mediaId);\r\n} catch (BandwidthLib\\APIException $e) {\r\n    print_r($e->getResponseCode());\r\n}\r\n"
                    },
                    {
                        "lang": "Python",
                        "source": "from bandwidth.bandwidth_client import BandwidthClient\r\nfrom bandwidth.exceptions.api_exception import APIException\r\n\r\nimport os\r\n\r\nBW_USERNAME = \"api-username\"\r\nBW_PASSWORD = \"api-password\"\r\nBW_ACCOUNT_ID = \"12345\"\r\n\r\nbandwidth_client = BandwidthClient(\r\n    messaging_basic_auth_user_name=BW_USERNAME,\r\n    messaging_basic_auth_password=BW_PASSWORD\r\n)\r\nmessaging_client = bandwidth_client.messaging_client.client\r\n\r\nmedia_id = \"m-1234\"\r\n\r\ntry:\r\n    messaging_client.delete_media(BW_ACCOUNT_ID, media_id)\r\nexcept APIException as e:\r\n    print(e.response_code)\r\n"
                    },
                    {
                        "lang": "Ruby",
                        "source": "require 'bandwidth'\r\n\r\ninclude Bandwidth\r\ninclude Bandwidth::Messaging\r\n\r\nbandwidth_client = Bandwidth::Client.new(\r\n    messaging_basic_auth_user_name: \"api-username\",\r\n    messaging_basic_auth_password: \"api-password\"\r\n)\r\nmessaging_client = bandwidth_client.messaging_client.client\r\n\r\nbegin\r\n  messaging_client.delete_media(\"12345\", ENV['MEDIA_ID'])\r\nrescue APIException => e\r\n  puts e.response_code\r\nend\r\n"
                    }
                ]
            }
        },
        "/users/{accountId}/messages": {
            "get": {
                "tags": [
                    "Messages"
                ],
                "summary": "Get Messages",
                "description": "Gets a list of messages based on query parameters.",
                "operationId": "GetMessages",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "required": true,
                        "description": "User's account ID",
                        "example": "900000",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "messageId",
                        "in": "query",
                        "required": false,
                        "description": "The ID of the message to search for. Special characters need to be encoded using URL encoding",
                        "example": "9e0df4ca-b18d-40d7-a59f-82fcdf5ae8e6",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "sourceTn",
                        "in": "query",
                        "required": false,
                        "description": "The phone number that sent the message. Accepted values are: a single full phone number, a comma separated list of full phone numbers (maximum of 10), or a single partial phone number (minimum of 5 characters, e.g. '%2B1919')",
                        "example": "%2B15554443333",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "destinationTn",
                        "in": "query",
                        "required": false,
                        "description": "The phone number that received the message. Accepted values are: a single full phone number, a comma separated list of full phone numbers (maximum of 10), or a single partial phone number (minimum of 5 characters, e.g. '%2B1919')",
                        "example": "%2B15554443333",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "messageStatus",
                        "in": "query",
                        "required": false,
                        "description": "The status of the message. One of RECEIVED, QUEUED, SENDING, SENT, FAILED, DELIVERED, ACCEPTED, UNDELIVERED",
                        "example": "RECEIVED",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "messageDirection",
                        "in": "query",
                        "required": false,
                        "description": "The direction of the message. One of INBOUND, OUTBOUND",
                        "example": "OUTBOUND",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "carrierName",
                        "in": "query",
                        "required": false,
                        "description": "The name of the carrier used for this message. Possible values include, but are not limited to, Verizon and TMobile. Special characters need to be encoded using URL encoding (i.e. AT&T should be passed as AT%26T)",
                        "example": "Verizon",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "messageType",
                        "in": "query",
                        "required": false,
                        "description": "The type of the message. One of mms, sms",
                        "example": "mms",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "errorCode",
                        "in": "query",
                        "required": false,
                        "description": "The error code of the message",
                        "example": 9902,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "fromDateTime",
                        "in": "query",
                        "required": false,
                        "description": "The start of the date range to search in ISO 8601 format. Uses the message receive time. The date range to search in is currently 14 days.",
                        "example": "2016-09-14T18:20:16.000Z",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "toDateTime",
                        "in": "query",
                        "required": false,
                        "description": "The end of the date range to search in ISO 8601 format. Uses the message receive time. The date range to search in is currently 14 days.",
                        "example": "2016-09-14T18:20:16.000Z",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "required": false,
                        "description": "The field and direction to sort by, combined with a colon. Direction is one of asc, desc",
                        "example": "sourceTn:desc",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "pageToken",
                        "in": "query",
                        "required": false,
                        "description": "A base64 encoded value used for pagination of results",
                        "example": "gdEewhcJLQRB5",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "required": false,
                        "description": "The maximum records requested in search result. Default 100. The sum of limit and after cannot be more than 10000",
                        "schema": {
                            "type": "integer"
                        },
                        "example": 50
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BandwidthMessagesList"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "415": {
                        "$ref": "#/components/responses/InvalidMediaType"
                    },
                    "429": {
                        "$ref": "#/components/responses/TooManyRequests"
                    }
                },
                "deprecated": false,
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "source": "curl 'https://messaging.bandwidth.com/api/v2/users/12345/messages?sourceTn=+15554443333' \\\r\n    -H 'Authorization: Basic dXNlcm5hbWU6cGFzc3dvcmQ='\r\n"
                    },
                    {
                        "lang": "C#",
                        "source": "using System;\r\nusing System.Threading.Tasks;\r\nusing Bandwidth.Standard;\r\nusing Bandwidth.Standard.Exceptions;\r\nusing Bandwidth.Standard.Messaging.Models;\r\n\r\nclass Program\r\n{\r\n    static async Task Main(string[] args)\r\n    {\r\n        var username = \"api-username\";\r\n        var password = \"api-pasword\";\r\n        var accountId = \"12345\";\r\n        var bandwidthNumber = \"+15554443333\";\r\n\r\n        var client = new BandwidthClient.Builder()\r\n            .MessagingBasicAuthCredentials(username, password)\r\n            .Build();\r\n\r\n        try\r\n        {\r\n            var response = await client.Messaging.APIController.GetMessagesAsync(accountId, sourceTn: bandwidthNumber);\r\n            Console.WriteLine(response.Data);\r\n        }\r\n        catch (ApiException e)\r\n        {\r\n            Console.WriteLine(e.Message);\r\n        }\r\n    }\r\n}\r\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import com.bandwidth.BandwidthClient;\r\nimport com.bandwidth.http.response.ApiResponse;\r\nimport com.bandwidth.messaging.models.BandwidthMessagesList;\r\n\r\nimport java.util.concurrent.CompletableFuture;\r\nimport java.util.concurrent.ExecutionException;\r\n\r\npublic class Sample {\r\n    public static final String USERNAME = \"api-username\";\r\n    public static final String PASSWORD = \"api-password\";\r\n    public static final String ACCOUNT_ID = \"12345\";\r\n\r\n    public static void main(String[] args) {\r\n        String bandwidthNumber = \"+15554443333\";\r\n\r\n        BandwidthClient client = new BandwidthClient.Builder()\r\n                .messagingBasicAuthCredentials(USERNAME, PASSWORD)\r\n                .build();\r\n\r\n        try {\r\n            CompletableFuture<ApiResponse<BandwidthMessagesList>> completableFuture = client.getMessagingClient().getAPIController().getMessagesAsync(ACCOUNT_ID, null, bandwidthNumber, null, null, null, null, null, null, null);\r\n            System.out.println(completableFuture.get().getResult());\r\n        } catch (InterruptedException | ExecutionException e) {\r\n            System.out.println(e.getMessage());\r\n        }\r\n    }\r\n}\r\n"
                    },
                    {
                        "lang": "Node.js",
                        "source": "import { Client, ApiController } from '@bandwidth/messaging';\r\n\r\nconst BW_USERNAME = \"api-username\";\r\nconst BW_PASSWORD = \"api-password\";\r\nconst BW_ACCOUNT_ID = \"12345\";\r\nconst messageId = \"1589228074636lm4k2je7j7jklbn2\";\r\n\r\nconst client = new Client({\r\n  basicAuthUserName: BW_USERNAME,\r\n  basicAuthPassword: BW_PASSWORD\r\n});\r\n\r\nconst controller = new ApiController(client);\r\n\r\nconst getMessage = async function() {\r\n  try {\r\n    const response = await controller.getMessages(BW_ACCOUNT_ID, messageId);\r\n    console.log(response.body)\r\n  } catch (error) {\r\n  console.error(error);\r\n}};\r\n\r\ngetMessage();\r\n"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\r\n\r\nrequire \"vendor/autoload.php\";\r\n\r\napi-username = \"api-username\";\r\napi-password = \"api-pasword\";\r\n12345 = \"12345\";\r\n+15554443333 = \"+15554443333\";\r\n\r\n$config = new BandwidthLib\\Configuration(\r\n    array(\r\n        'messagingBasicAuthUserName' => $BW_USERNAME,\r\n        'messagingBasicAuthPassword' => $BW_PASSWORD,\r\n    )\r\n);\r\n$client = new BandwidthLib\\BandwidthClient($config);\r\n\r\n$messagingClient = $client->getMessaging()->getClient();\r\n\r\ntry {\r\n    $response = $messagingClient->getMessages($BW_ACCOUNT_ID, $sourceTn = $BW_NUMBER);\r\n    print_r($response->getResult()->totalCount);\r\n} catch (BandwidthLib\\APIException $e) {\r\n    print_r($e->getResponseCode());\r\n}\r\n"
                    },
                    {
                        "lang": "Python",
                        "source": "from bandwidth.bandwidth_client import BandwidthClient\r\nfrom bandwidth.exceptions.api_exception import APIException\r\n\r\nimport os\r\n\r\nBW_USERNAME = \"api-username\"\r\nBW_PASSWORD = \"api-password\"\r\nBW_ACCOUNT_ID = \"12345\"\r\n\r\nbandwidth_client = BandwidthClient(\r\n    messaging_basic_auth_user_name=BW_USERNAME,\r\n    messaging_basic_auth_password=BW_PASSWORD\r\n)\r\nmessaging_client = bandwidth_client.messaging_client.client\r\n\r\nsource_tn = \"+15554443333\"\r\n\r\ntry:\r\n    response = messaging_client.get_messages(BW_ACCOUNT_ID, source_tn=source_tn)\r\n    print(response.body.total_count)\r\nexcept APIException as e:\r\n    print(e.response_code)\r\n"
                    },
                    {
                        "lang": "Ruby",
                        "source": "require 'bandwidth'\r\n\r\ninclude Bandwidth\r\ninclude Bandwidth::Messaging\r\n\r\nbandwidth_client = Bandwidth::Client.new(\r\n    messaging_basic_auth_user_name: \"api-username\",\r\n    messaging_basic_auth_password: \"api-password\"\r\n)\r\nmessaging_client = bandwidth_client.messaging_client.client\r\n\r\nbegin\r\n  result = messaging_client.get_messages(\"12345\", :source_tn => \"+15554443333\")\r\n  puts result.data.total_count\r\nrescue APIException => e\r\n  puts e.response_code\r\nend\r\n"
                    }
                ]
            },
            "post": {
                "tags": [
                    "Messages"
                ],
                "summary": "Create Message",
                "description": "Endpoint for sending text messages and picture messages using V2 messaging.",
                "operationId": "CreateMessage",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "path",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "description": "User's account ID",
                        "example": "900000",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/MessageRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "202": {
                        "description": "successful operation",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BandwidthMessage"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "415": {
                        "$ref": "#/components/responses/InvalidMediaType"
                    },
                    "429": {
                        "$ref": "#/components/responses/TooManyRequests"
                    }
                },
                "deprecated": false,
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "source": "curl 'https://messaging.bandwidth.com/api/v2/users/12345/messages' \\\r\n    -X POST \\\r\n    -H 'Authorization: Basic dXNlcm5hbWU6cGFzc3dvcmQ=' \\\r\n    -H 'Content-Type: application/json' \\\r\n    -d '{\r\n        \"applicationId\": \"$BW_ACCOUNT_ID\",\r\n        \"to\": [\r\n            \"+15553334444\",\r\n            \"+15552223333\"\r\n        ],\r\n        \"from\": \"+15554443333\",\r\n        \"text\": \"Hello World!\",\r\n        \"media\": [\r\n            \"https://dev.bandwidth.com/images/bandwidth-logo.png\",\r\n            \"https://dev.bandwidth.com/images/github_logo.png\"\r\n        ],\r\n        \"tag\": \"custom string\",\r\n        \"priority\": \"default\"\r\n    }'\r\n"
                    },
                    {
                        "lang": "C#",
                        "source": "using System;\r\nusing System.Collections.Generic;\r\nusing System.Threading.Tasks;\r\nusing Bandwidth.Standard;\r\nusing Bandwidth.Standard.Exceptions;\r\nusing Bandwidth.Standard.Messaging.Models;\r\n\r\nclass Program\r\n{\r\n    static async Task Main(string[] args)\r\n    {\r\n        var username = \"api-username\";\r\n        var password = \"api-pasword\";\r\n        var accountId = \"12345\";\r\n        var applicationId = \"1234-asdf\";\r\n        var bandwidthNumber = \"+15554443333\";\r\n        var userNumber = \"+15553334444\";\r\n\r\n        var client = new BandwidthClient.Builder()\r\n            .MessagingBasicAuthCredentials(username, password)\r\n            .Build();\r\n\r\n        var request = new MessageRequest()\r\n        {\r\n            ApplicationId = applicationId,\r\n            To = new List<string> { userNumber },\r\n            From = bandwidthNumber,\r\n            Text = \"Hello world\"\r\n        };\r\n\r\n        try\r\n        {\r\n            var response = await client.Messaging.APIController.CreateMessageAsync(accountId, request);\r\n            Console.WriteLine(response.Data);\r\n        }\r\n        catch (ApiException e)\r\n        {\r\n            Console.WriteLine(e.Message);\r\n        }\r\n    }\r\n}\r\n"
                    },
                    {
                        "lang": "Java",
                        "source": "import com.bandwidth.BandwidthClient;\r\nimport com.bandwidth.http.response.ApiResponse;\r\nimport com.bandwidth.messaging.models.BandwidthMessage;\r\nimport com.bandwidth.messaging.models.MessageRequest;\r\n\r\nimport java.util.concurrent.CompletableFuture;\r\nimport java.util.concurrent.ExecutionException;\r\nimport java.util.Collections;\r\n\r\npublic class Sample {\r\n    public static final String USERNAME = \"api-username\";\r\n    public static final String PASSWORD = \"api-password\";\r\n    public static final String ACCOUNT_ID = \"12345\";\r\n\r\n    public static void main(String[] args) {\r\n        String messagingApplicationId = \"1234-asdf\";\r\n        String to = \"+15553334444\";\r\n        String from = \"+15554443333\";\r\n\r\n        BandwidthClient client = new BandwidthClient.Builder()\r\n                .messagingBasicAuthCredentials(USERNAME, PASSWORD)\r\n                .build();\r\n\r\n        MessageRequest request = new MessageRequest();\r\n        request.setApplicationId(messagingApplicationId);\r\n        request.setTo(Collections.singletonList(to));\r\n        request.setFrom(from);\r\n        request.setText(\"Hello world\");\r\n\r\n        try {\r\n            CompletableFuture<ApiResponse<BandwidthMessage>> completableFuture = client.getMessagingClient().getAPIController().createMessageAsync(ACCOUNT_ID, request);\r\n            System.out.println(completableFuture.get().getResult());\r\n        } catch (InterruptedException | ExecutionException e) {\r\n            System.out.println(e.getMessage());\r\n        }\r\n    }\r\n}\r\n"
                    },
                    {
                        "lang": "Node.js",
                        "source": "import { Client, ApiController } from '@bandwidth/messaging';\r\n\r\nconst BW_USERNAME = \"api-username\";\r\nconst BW_PASSWORD = \"api-password\";\r\nconst BW_ACCOUNT_ID = \"12345\";\r\nconst BW_MESSAGING_APPLICATION_ID = \"1234-asdf\";\r\nconst BW_NUMBER = \"+15554443333\";\r\nconst USER_NUMBER = \"+15553334444\";\r\n\r\nconst client = new Client({\r\n  basicAuthUserName: BW_USERNAME,\r\n  basicAuthPassword: BW_PASSWORD\r\n});\r\n\r\nconst controller = new ApiController(client);\r\n\r\nconst accountId = BW_ACCOUNT_ID;\r\n\r\nconst sendMessage = async function() {\r\n  try {\r\n    const response = await controller.createMessage(accountId, {\r\n        applicationId: BW_MESSAGING_APPLICATION_ID,\r\n        to: [USER_NUMBER],\r\n        from: BW_NUMBER,\r\n        text: 'The quick brown fox jumps over the lazy dog.'\r\n    });\r\n    console.log(response.body);\r\n  } catch (error) {\r\n  console.error(error);\r\n}};\r\n\r\nsendMessage();\r\n"
                    },
                    {
                        "lang": "PHP",
                        "source": "<?php\r\n\r\nrequire \"vendor/autoload.php\";\r\n\r\napi-username = \"api-username\";\r\napi-password = \"api-pasword\";\r\n12345 = \"12345\";\r\n1234-asdf = \"1234-asdf\";\r\n+15554443333 = \"+15554443333\";\r\n+15553334444 = \"+15553334444\";\r\n\r\n$config = new BandwidthLib\\Configuration(\r\n    array(\r\n        'messagingBasicAuthUserName' => $BW_USERNAME,\r\n        'messagingBasicAuthPassword' => $BW_PASSWORD,\r\n    )\r\n);\r\n$client = new BandwidthLib\\BandwidthClient($config);\r\n\r\n$messagingClient = $client->getMessaging()->getClient();\r\n\r\n$body = new BandwidthLib\\Messaging\\Models\\MessageRequest();\r\n$body->from = $BW_NUMBER;\r\n$body->to = array($USER_NUMBER);\r\n$body->applicationId = $BW_MESSAGING_APPLICATION_ID;\r\n$body->text = \"Hello world\";\r\n\r\ntry {\r\n    $response = $messagingClient->createMessage($BW_ACCOUNT_ID, $body);\r\n    print_r($response->getResult()->id);\r\n} catch (BandwidthLib\\APIException $e) {\r\n    print_r($e->getResponseCode());\r\n}\r\n"
                    },
                    {
                        "lang": "Python",
                        "source": "from bandwidth.bandwidth_client import BandwidthClient\r\nfrom bandwidth.messaging.models.message_request import MessageRequest\r\nfrom bandwidth.exceptions.api_exception import APIException\r\n\r\nimport os\r\n\r\nBW_USERNAME = \"api-username\"\r\nBW_PASSWORD = \"api-password\"\r\nBW_ACCOUNT_ID = \"12345\"\r\nBW_MESSAGING_APPLICATION_ID = \"1234-asdf\"\r\nBW_NUMBER = \"+15554443333\"\r\nUSER_NUMBER = \"+15553334444\"\r\n\r\nbandwidth_client = BandwidthClient(\r\n    messaging_basic_auth_user_name=BW_USERNAME,\r\n    messaging_basic_auth_password=BW_PASSWORD\r\n)\r\nmessaging_client = bandwidth_client.messaging_client.client\r\n\r\nbody = MessageRequest()\r\nbody.application_id = BW_MESSAGING_APPLICATION_ID\r\nbody.to = [USER_NUMBER]\r\nbody.mfrom = BW_NUMBER\r\nbody.text = \"Hello world\"\r\ntry:\r\n    response = messaging_client.create_message(BW_ACCOUNT_ID, body)\r\n    print(response.body.id)\r\nexcept APIException as e:\r\n    print(e.response_code)\r\n"
                    },
                    {
                        "lang": "Ruby",
                        "source": "require 'bandwidth'\r\n\r\ninclude Bandwidth\r\ninclude Bandwidth::Messaging\r\n\r\nbandwidth_client = Bandwidth::Client.new(\r\n    messaging_basic_auth_user_name: \"api-username\",\r\n    messaging_basic_auth_password: \"api-password\"\r\n)\r\nmessaging_client = bandwidth_client.messaging_client.client\r\n\r\nbody = MessageRequest.new\r\nbody.application_id = \"1234-asdf\"\r\nbody.to = [\"+15553334444\"]\r\nbody.from = \"+15554443333\"\r\nbody.text = 'Hey, check this out!'\r\nbody.tag = '{\"test\": \"message\"}'\r\nbegin\r\n    result = messaging_client.create_message(\"12345\", body)\r\n    puts 'messageId: ' + result.data.id\r\nrescue APIException => e\r\n    puts e.response_code\r\nend\r\n"
                    }
                ]
            }
        }
    },
    "components": {
        "schemas": {
            "BandwidthMessagesList": {
                "title": "BandwidthMessagesList",
                "type": "object",
                "properties": {
                    "totalCount": {
                        "type": "integer",
                        "description": "Total number of messages matched by the search",
                        "example": 100
                    },
                    "pageInfo": {
                        "$ref": "#/components/schemas/PageInfo"
                    },
                    "messages": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/BandwidthMessageItem"
                        }
                    }
                }
            },
            "BandwidthMessageItem": {
                "title": "BandwidthMessageItem",
                "type": "object",
                "properties": {
                    "messageId": {
                        "type": "string",
                        "description": "The message id",
                        "example": "1589228074636lm4k2je7j7jklbn2"
                    },
                    "accountId": {
                        "type": "string",
                        "description": "The account id of the message",
                        "example": "12345"
                    },
                    "sourceTn": {
                        "type": "string",
                        "description": "The source phone number of the message",
                        "example": "+15554443333"
                    },
                    "destinationTn": {
                        "type": "string",
                        "description": "The recipient phone number of the message",
                        "example": "+15554442222"
                    },
                    "messageStatus": {
                        "type": "string",
                        "description": "The status of the message",
                        "example": "DLR_EXPIRED"
                    },
                    "messageDirection": {
                        "type": "string",
                        "description": "The direction of the message relative to Bandwidth. INBOUND or OUTBOUND",
                        "example": "OUTBOUND"
                    },
                    "messageType": {
                        "type": "string",
                        "description": "The type of message. sms or mms",
                        "example": "sms"
                    },
                    "segmentCount": {
                        "type": "integer",
                        "description": "The number of segments the message was sent as",
                        "example": 1
                    },
                    "errorCode": {
                        "type": "integer",
                        "description": "The numeric error code of the message",
                        "example": 9902
                    },
                    "receiveTime": {
                        "type": "string",
                        "description": "The ISO 8601 datetime of the message",
                        "example": "2020-04-07T14:03:07.000Z"
                    },
                    "carrierName": {
                        "type": "string",
                        "description": "The name of the carrier. Not currently supported for MMS, coming soon",
                        "example": "other"
                    },
                    "messageSize": {
                        "type": "integer",
                        "description": "The size of the message including message content and headers",
                        "example": 27
                    },
                    "messageLength": {
                        "type": "integer",
                        "description": "The length of the message content",
                        "example": 18
                    },
                    "attachmentCount": {
                        "type": "integer",
                        "description": "The number of attachments the message has",
                        "example": 1
                    },
                    "recipientCount": {
                        "type": "integer",
                        "description": "The number of recipients the message has",
                        "example": 1
                    },
                    "campaignClass": {
                        "type": "string",
                        "description": "The campaign class of the message, if it has one",
                        "example": "T"
                    }
                }
            },
            "PageInfo": {
                "title": "PageInfo",
                "type": "object",
                "properties": {
                    "prevPage": {
                        "type": "string",
                        "description": "The link to the previous page for pagination",
                        "example": "https://messaging.bandwidth.com/api/v2/users/{accountId}/messages?messageStatus=DLR_EXPIRED&nextPage=DLAPE902"
                    },
                    "nextPage": {
                        "type": "string",
                        "description": "The link to the next page for pagination",
                        "example": "https://messaging.bandwidth.com/api/v2/users/{accountId}/messages?messageStatus=DLR_EXPIRED&prevPage=GL83PD3C"
                    },
                    "prevPageToken": {
                        "type": "string",
                        "description": "The isolated pagination token for the previous page",
                        "example": "DLAPE902"
                    },
                    "nextPageToken": {
                        "type": "string",
                        "description": "The isolated pagination token for the next page",
                        "example": "GL83PD3C"
                    }
                }
            },
            "MessagingException": {
                "title": "MessagingException",
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    }
                },
                "required": [
                    "type",
                    "description"
                ]
            },
            "Media": {
                "title": "Media",
                "type": "object",
                "properties": {
                    "content": {
                        "type": "string"
                    },
                    "contentLength": {
                        "type": "integer"
                    },
                    "mediaName": {
                        "type": "string"
                    }
                }
            },
            "Tag": {
                "title": "Tag",
                "type": "object",
                "properties": {
                    "key": {
                        "type": "string"
                    },
                    "value": {
                        "type": "string"
                    }
                }
            },
            "DeferredResult": {
                "title": "DeferredResult",
                "type": "object",
                "properties": {
                    "result": {
                        "type": "object"
                    },
                    "setOrExpired": {
                        "type": "boolean"
                    }
                }
            },
            "BandwidthCallbackMessage": {
                "title": "BandwidthCallbackMessage",
                "type": "object",
                "properties": {
                    "time": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    },
                    "to": {
                        "type": "string"
                    },
                    "errorCode": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "message": {
                        "$ref": "#/components/schemas/BandwidthMessage"
                    }
                }
            },
            "BandwidthMessage": {
                "title": "BandwidthMessage",
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The id of the message",
                        "example": "1589228074636lm4k2je7j7jklbn2"
                    },
                    "owner": {
                        "type": "string",
                        "description": "The Bandwidth phone number associated with the message",
                        "example": "+15554443333"
                    },
                    "applicationId": {
                        "type": "string",
                        "description": "The application ID associated with the message",
                        "example": "93de2206-9669-4e07-948d-329f4b722ee2"
                    },
                    "time": {
                        "type": "string",
                        "description": "The datetime stamp of the message in ISO 8601",
                        "example": "2016-09-14T18:20:16Z"
                    },
                    "segmentCount": {
                        "type": "integer",
                        "description": "The number of segments the original message from the user is broken into before sending over to carrier networks",
                        "example": 2
                    },
                    "direction": {
                        "type": "string",
                        "description": "The direction of the message relative to Bandwidth. Can be in or out",
                        "example": "in"
                    },
                    "to": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The phone number recipients of the message",
                        "example": [
                            "+15552223333"
                        ]
                    },
                    "from": {
                        "type": "string",
                        "description": "The phone number the message was sent from",
                        "example": "+15553332222"
                    },
                    "media": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of media URLs sent in the message. Including a `filename` field in the `Content-Disposition` header of the media linked with a URL will set the displayed file name. This is a best practice to ensure that your media has a readable file name.",
                        "example": [
                            "https://dev.bandwidth.com/images/bandwidth-logo.png"
                        ]
                    },
                    "text": {
                        "type": "string",
                        "description": "The contents of the message",
                        "example": "Hello world"
                    },
                    "tag": {
                        "type": "string",
                        "description": "The custom string set by the user",
                        "example": "custom tag"
                    },
                    "priority": {
                        "type": "string",
                        "description": "The priority specified by the user",
                        "example": "default"
                    }
                }
            },
            "MessageRequest": {
                "title": "MessageRequest",
                "type": "object",
                "required": [
                    "applicationId",
                    "to",
                    "from"
                ],
                "properties": {
                    "applicationId": {
                        "type": "string",
                        "description": "The ID of the Application your from number is associated with in the Bandwidth Phone Number Dashboard.",
                        "example": "93de2206-9669-4e07-948d-329f4b722ee2"
                    },
                    "to": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "The phone number(s) the message should be sent to in E164 format",
                        "example": [
                            "+15554443333",
                            "+15552223333"
                        ],
                        "items": {
                            "type": "string"
                        }
                    },
                    "from": {
                        "type": "string",
                        "description": "One of your telephone numbers the message should come from in E164 format",
                        "example": "+15551113333"
                    },
                    "text": {
                        "type": "string",
                        "description": "The contents of the text message. Must be 2048 characters or less.",
                        "example": "Hello world"
                    },
                    "media": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of URLs to include as media attachments as part of the message.",
                        "example": [
                            "https://dev.bandwidth.com/images/bandwidth-logo.png",
                            "https://dev.bandwidth.com/images/github_logo.png"
                        ]
                    },
                    "tag": {
                        "type": "string",
                        "description": "A custom string that will be included in callback events of the message. Max 1024 characters",
                        "example": "custom string"
                    },
                    "priority": {
                        "type": "string",
                        "enum": [
                            "default",
                            "high"
                        ],
                        "description": "The message's priority, currently for toll-free or short code SMS only. Messages with a priority value of `\"high\"` are given preference over your other traffic.",
                        "example": "default"
                    }
                }
            }
        },
        "responses": {
            "BadRequest": {
                "description": "400 Request is malformed or invalid",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/MessagingException"
                        }
                    }
                }
            },
            "Unauthorized": {
                "description": "401 The specified user does not have access to the account",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/MessagingException"
                        }
                    }
                }
            },
            "Forbidden": {
                "description": "403 The user does not have access to this API",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/MessagingException"
                        }
                    }
                }
            },
            "NotFound": {
                "description": "404 Path not found",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/MessagingException"
                        }
                    }
                }
            },
            "InvalidMediaType": {
                "description": "415 The content-type of the request is incorrect",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/MessagingException"
                        }
                    }
                }
            },
            "TooManyRequests": {
                "description": "429 The rate limit has been reached",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/MessagingException"
                        }
                    }
                }
            }
        },
        "securitySchemes": {
            "httpBasic": {
                "type": "http",
                "scheme": "basic"
            }
        }
    },
    "security": [
        {
            "httpBasic": []
        }
    ],
    "tags": []
}