openapi: 3.0.3
info:
  title: Messaging
  version: 4.3.0
  contact:
    name: Bandwidth
    url: https://support.bandwidth.com
    email: support@bandwidth.com
  description: |-
    The API Specification for Bandwidth's Messaging Platform

    ## Base URL

    `https://messaging.bandwidth.com/api/v2`
servers:
  - url: https://messaging.bandwidth.com/api/v2
    description: Production
paths:
  /users/{accountId}/media:
    get:
      summary: List Media
      description: Gets a list of your media files. No query parameters are supported.
      operationId: listMedia
      tags:
        - Media
      parameters:
        - $ref: '#/components/parameters/accountId'
        - $ref: '#/components/parameters/continuationToken'
      responses:
        '200':
          $ref: '#/components/responses/listMediaResponse'
        '400':
          $ref: '#/components/responses/messagingBadRequestError'
        '401':
          $ref: '#/components/responses/messagingUnauthorizedError'
        '403':
          $ref: '#/components/responses/messagingForbiddenError'
        '404':
          $ref: '#/components/responses/messagingNotFoundError'
        '406':
          $ref: '#/components/responses/messagingNotAcceptableError'
        '415':
          $ref: '#/components/responses/messagingInvalidMediaTypeError'
        '429':
          $ref: '#/components/responses/messagingTooManyRequestsError'
        '500':
          $ref: '#/components/responses/messagingInternalServerError'
      x-codeSamples:
        - lang: cURL
          source: |
            curl 'https://messaging.bandwidth.com/api/v2/users/12345/media' \
                -H 'Authorization: Basic dXNlcm5hbWU6cGFzc3dvcmQ='
        - lang: C#
          source: |
            using System;
            using System.Threading.Tasks;
            using Bandwidth.Standard;
            using Bandwidth.Standard.Exceptions;
            using Bandwidth.Standard.Messaging.Models;

            class Program
            {
                static async Task Main(string[] args)
                {
                    var username = "api-username";
                    var password = "api-pasword";
                    var accountId = "12345";

                    var client = new BandwidthClient.Builder()
                        .MessagingBasicAuthCredentials(username, password)
                        .Build();

                    try
                    {
                        var response = await client.Messaging.APIController.ListMediaAsync(accountId);
                        Console.WriteLine(response.Data);
                    }
                    catch (ApiException e)
                    {
                        Console.WriteLine(e.Message);
                    }
                }
            }
        - lang: Java
          source: |
            import com.bandwidth.sdk.ApiClient;
            import com.bandwidth.sdk.ApiException;
            import com.bandwidth.sdk.Configuration;
            import com.bandwidth.sdk.auth.*;
            import com.bandwidth.sdk.models.*;
            import com.bandwidth.sdk.api.MediaApi;

            public class Sample {
                public static void main(String[] args) {
                    ApiClient defaultClient = Configuration.getDefaultApiClient();        

                    // Configure HTTP basic authorization: Basic
                    HttpBasicAuth Basic = (HttpBasicAuth) defaultClient.getAuthentication("Basic");
                    Basic.setUsername("YOUR USERNAME");
                    Basic.setPassword("YOUR PASSWORD");

                    MediaApi apiInstance = new MediaApi(defaultClient);
                    String accountId = "9900000"; // String | Your Bandwidth Account ID.
                    String continuationToken = "1XEi2tsFtLo1JbtLwETnM1ZJ+PqAa8w6ENvC5QKvwyrCDYII663Gy5M4s40owR1tjkuWUif6qbWvFtQJR5/ipqbUnfAqL254LKNlPy6tATCzioKSuHuOqgzloDkSwRtX0LtcL2otHS69hK343m+SjdL+vlj71tT39"; // String | Continuation token used to retrieve subsequent media.
                    try {
                        List<Media> result = apiInstance.listMedia(accountId, continuationToken);
                        System.out.println(result);
                    } catch (ApiException e) {
                        System.err.println("Exception when calling MediaApi#listMedia");
                        System.err.println("Status code: " + e.getCode());
                        System.err.println("Reason: " + e.getResponseBody());
                        System.err.println("Response headers: " + e.getResponseHeaders());
                        e.printStackTrace();
                    }
                }
            }
        - lang: Node.js
          source: |
            import { Client, ApiController } from '@bandwidth/messaging';
            import * as fs from 'fs';

            const BW_USERNAME = "api-username";
            const BW_PASSWORD = "api-password";
            const BW_ACCOUNT_ID = "12345";

            const client = new Client({
              basicAuthUserName: BW_USERNAME,
              basicAuthPassword: BW_PASSWORD
            });

            const controller = new ApiController(client);

            const listMedia = async function() {
              try {
                const response = await controller.listMedia(BW_ACCOUNT_ID);
                console.log(response.result)
              } catch (error) {
              console.error(error);
            }};

            listMedia();
        - lang: PHP
          source: |
            <?php

            require "vendor/autoload.php";

            api-username = "api-username";
            api-password = "api-pasword";
            12345 = "12345";

            $config = new BandwidthLib\Configuration(
                array(
                    'messagingBasicAuthUserName' => $BW_USERNAME,
                    'messagingBasicAuthPassword' => $BW_PASSWORD,
                )
            );
            $client = new BandwidthLib\BandwidthClient($config);

            $messagingClient = $client->getMessaging()->getClient();

            try {
                $response = $messagingClient->listMedia($BW_ACCOUNT_ID);
                if (count($response->getResult()) > 0) {
                    print_r($response->getResult()[0]->mediaName);
                }
            } catch (BandwidthLib\APIException $e) {
                print_r($e->getResponseCode());
            }
        - lang: Python
          source: |
            from bandwidth.bandwidth_client import BandwidthClient
            from bandwidth.exceptions.api_exception import APIException

            import os

            BW_USERNAME = "api-username"
            BW_PASSWORD = "api-password"
            BW_ACCOUNT_ID = "12345"

            bandwidth_client = BandwidthClient(
                messaging_basic_auth_user_name=BW_USERNAME,
                messaging_basic_auth_password=BW_PASSWORD
            )
            messaging_client = bandwidth_client.messaging_client.client

            try:
                response = messaging_client.list_media(BW_ACCOUNT_ID)
                print(response.body)
            except APIException as e:
                print(e.response_code)
        - lang: Ruby
          source: |
            require 'bandwidth-sdk'

            Bandwidth.configure do |config|
              config.username = 'api-username'
              config.password = 'api-password'
            end

            api_instance = Bandwidth::MediaApi.new
            account_id = '12345'

            begin
              result = api_instance.list_media(account_id)
              result.each do |item|
                p item.media_name
              end
            rescue Bandwidth::ApiError => e
              p "Error when calling MediaApi->list_media: #{e}"
            end
  /users/{accountId}/media/{mediaId}:
    get:
      summary: Get Media
      description: Downloads a media file you previously uploaded.
      operationId: getMedia
      tags:
        - Media
      parameters:
        - $ref: '#/components/parameters/accountId'
        - $ref: '#/components/parameters/mediaId'
      responses:
        '200':
          $ref: '#/components/responses/getMediaResponse'
        '400':
          $ref: '#/components/responses/messagingBadRequestError'
        '401':
          $ref: '#/components/responses/messagingUnauthorizedError'
        '403':
          $ref: '#/components/responses/messagingForbiddenError'
        '404':
          $ref: '#/components/responses/messagingNotFoundError'
        '406':
          $ref: '#/components/responses/messagingNotAcceptableError'
        '415':
          $ref: '#/components/responses/messagingInvalidMediaTypeError'
        '429':
          $ref: '#/components/responses/messagingTooManyRequestsError'
        '500':
          $ref: '#/components/responses/messagingInternalServerError'
      x-codeSamples:
        - lang: cURL
          source: >
            curl
            'https://messaging.bandwidth.com/api/v2/users/12345/media/media-id-123'
            \
                -H 'Authorization: Basic dXNlcm5hbWU6cGFzc3dvcmQ='
        - lang: C#
          source: |
            using System;
            using System.Threading.Tasks;
            using Bandwidth.Standard;
            using Bandwidth.Standard.Exceptions;
            using Bandwidth.Standard.Messaging.Models;

            class Program
            {
                static async Task Main(string[] args)
                {
                    var username = "api-username";
                    var password = "api-pasword";
                    var accountId = "12345";

                    var client = new BandwidthClient.Builder()
                        .MessagingBasicAuthCredentials(username, password)
                        .Build();

                    var mediaId = "media-id-123";

                    try
                    {
                        var response = await client.Messaging.APIController.GetMediaAsync(accountId, mediaId);
                        Console.WriteLine(response.Data);
                    }
                    catch (ApiException e)
                    {
                        Console.WriteLine(e.Message);
                    }
                }
            }
        - lang: Java
          source: |
            import com.bandwidth.BandwidthClient;
            import com.bandwidth.http.response.ApiResponse;

            import java.util.concurrent.CompletableFuture;
            import java.util.concurrent.ExecutionException;
            import java.io.InputStream;

            public class Sample {
                public static final String USERNAME = "api-username";
                public static final String PASSWORD = "api-password";
                public static final String ACCOUNT_ID = "12345";

                public static void main(String[] args) {
                    String mediaId = "media-id-123";

                    BandwidthClient client = new BandwidthClient.Builder()
                            .messagingBasicAuthCredentials(USERNAME, PASSWORD)
                            .build();

                    try {
                        CompletableFuture<ApiResponse<InputStream>> completableFuture = client.getMessagingClient().getAPIController().getMediaAsync(ACCOUNT_ID, mediaId);
                        System.out.println(completableFuture.get().getResult());
                    } catch (InterruptedException | ExecutionException e) {
                        System.out.println(e.getMessage());
                    }
                }
            }
        - lang: Node.js
          source: |
            import { Client, ApiController } from '@bandwidth/messaging';
            import * as fs from 'fs';

            const BW_USERNAME = "api-username";
            const BW_PASSWORD = "api-password";
            const BW_ACCOUNT_ID = "12345";
            const mediaId = "media-id-123.pdf";

            const client = new Client({
              basicAuthUserName: BW_USERNAME,
              basicAuthPassword: BW_PASSWORD
            });

            const controller = new ApiController(client);

            const getMedia = async function() {
              try {
                const response = await controller.getMedia(BW_ACCOUNT_ID, mediaId);
                const chunks = [];
                for await (let chunk of response.result) {
                    chunks.push(chunk);
                }
                fs.writeFileSync('file-to-write.pdf', chunks[0], 'binary');
              } catch (error) {
              console.error(error);
            }};

            getMedia();
        - lang: PHP
          source: |
            <?php

            require "vendor/autoload.php";

            api-username = "api-username";
            api-password = "api-pasword";
            12345 = "12345";

            $config = new BandwidthLib\Configuration(
                array(
                    'messagingBasicAuthUserName' => $BW_USERNAME,
                    'messagingBasicAuthPassword' => $BW_PASSWORD,
                )
            );
            $client = new BandwidthLib\BandwidthClient($config);

            $messagingClient = $client->getMessaging()->getClient();

            $mediaFileName = "media-id-123";

            try {
                $response = $messagingClient->getMedia($BW_ACCOUNT_ID, $mediaFileName);
                $downloadedMediaFile = $response->getResult();
            } catch (BandwidthLib\APIException $e) {
                print_r($e->getResponseCode());
            }
        - lang: Python
          source: |
            from bandwidth.bandwidth_client import BandwidthClient
            from bandwidth.exceptions.api_exception import APIException
              
            import os

            BW_USERNAME = "api-username"
            BW_PASSWORD = "api-password"
            BW_ACCOUNT_ID = "12345"

            bandwidth_client = BandwidthClient(
                messaging_basic_auth_user_name=BW_USERNAME,
                messaging_basic_auth_password=BW_PASSWORD
            )
            messaging_client = bandwidth_client.messaging_client.client

            media_file_name = 'media-id-123'

            try:
                response = messaging_client.get_media(BW_ACCOUNT_ID, media_file_name)
                downloaded_media_file = response.body
            except APIException as e:
                print(e.response_code)
        - lang: Ruby
          source: |
            require 'bandwidth-sdk'
            Bandwidth.configure do |config|
              config.username = 'api-username'
              config.password = 'api-password'
            end

            api_instance = Bandwidth::MediaApi.new
            account_id = '12345'
            media_id = '14762070468292kw2fuqty55yp2b2/0/bw.png'

            begin
              result = api_instance.get_media(account_id, media_id)
              f = File.open('file_to_write', 'wb')
              f.p(result)
              f.close
            rescue Bandwidth::ApiError => e
              p "Error when calling MediaApi->get_media: #{e}"
            end
    put:
      summary: Upload Media
      description: >-
        Upload a file. You may add headers to the request in order to provide
        some control to your media file.


        If a file is uploaded with the same name as a file that already exists
        under this account, the previous file will be overwritten.


        A list of supported media types can be found
        [here](https://support.bandwidth.com/hc/en-us/articles/360014128994-What-MMS-file-types-are-supported-).
      operationId: uploadMedia
      tags:
        - Media
      parameters:
        - $ref: '#/components/parameters/accountId'
        - $ref: '#/components/parameters/mediaId'
        - $ref: '#/components/parameters/contentType'
        - $ref: '#/components/parameters/cacheControl'
      requestBody:
        $ref: '#/components/requestBodies/uploadMediaRequest'
      responses:
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/messagingBadRequestError'
        '401':
          $ref: '#/components/responses/messagingUnauthorizedError'
        '403':
          $ref: '#/components/responses/messagingForbiddenError'
        '404':
          $ref: '#/components/responses/messagingNotFoundError'
        '406':
          $ref: '#/components/responses/messagingNotAcceptableError'
        '415':
          $ref: '#/components/responses/messagingInvalidMediaTypeError'
        '429':
          $ref: '#/components/responses/messagingTooManyRequestsError'
        '500':
          $ref: '#/components/responses/messagingInternalServerError'
      x-codeSamples:
        - lang: cURL
          source: >
            curl
            'https://messaging.bandwidth.com/api/v2/users/12345/media/media-id-123'
            \
                -X PUT \
                -H 'Authorization: Basic dXNlcm5hbWU6cGFzc3dvcmQ='
        - lang: C#
          source: |
            using System;
            using System.IO;
            using System.Text;
            using System.Threading.Tasks;
            using Bandwidth.Standard;
            using Bandwidth.Standard.Exceptions;
            using Bandwidth.Standard.Http.Client;

            class Program
            {
                static async Task Main(string[] args)
                {
                    var username = "api-username";
                    var password = "api-pasword";
                    var accountId = "12345";

                    var client = new BandwidthClient.Builder()
                        .MessagingBasicAuthCredentials(username, password)
                        .Build();

                    var mediaId = "media-id-123";
                                
                    var content = "Hello world";
                    var contentType = "text/plain";

                    var memoryStream = new MemoryStream(Encoding.UTF8.GetBytes(content));
                    var fileStreamInfo = new FileStreamInfo(memoryStream);

                    try
                    {
                        await client.Messaging.APIController.UploadMediaAsync(accountId, mediaId, fileStreamInfo, contentType);
                    }
                    catch (ApiException e)
                    {
                        Console.WriteLine(e.Message);
                    }
                }
            }
        - lang: Java
          source: |
            import com.bandwidth.sdk.ApiClient;
            import com.bandwidth.sdk.ApiException;
            import com.bandwidth.sdk.Configuration;
            import com.bandwidth.sdk.auth.*;
            import com.bandwidth.sdk.models.*;
            import com.bandwidth.sdk.api.MediaApi;

            public class Sample {
                public static void main(String[] args) {
                    ApiClient defaultClient = Configuration.getDefaultApiClient();        

                    // Configure HTTP basic authorization: Basic
                    HttpBasicAuth Basic = (HttpBasicAuth) defaultClient.getAuthentication("Basic");
                    Basic.setUsername("YOUR USERNAME");
                    Basic.setPassword("YOUR PASSWORD");

                    MediaApi apiInstance = new MediaApi(defaultClient);
                    String accountId = "9900000"; // String | Your Bandwidth Account ID.
                    String mediaId = "14762070468292kw2fuqty55yp2b2/0/bw.png"; // String | Media ID to retrieve.
                    File body = new File("/path/to/file"); // File |
                    String contentType = "audio/wav"; // String | The media type of the entity-body.
                    String cacheControl = "no-cache"; // String | General-header field is used to specify directives that MUST be obeyed by all caching mechanisms along the request/response chain.
                    try {
                        apiInstance.uploadMedia(accountId, mediaId, body, contentType, cacheControl);
                    } catch (ApiException e) {
                        System.err.println("Exception when calling MediaApi#uploadMedia");
                        System.err.println("Status code: " + e.getCode());
                        System.err.println("Reason: " + e.getResponseBody());
                        System.err.println("Response headers: " + e.getResponseHeaders());
                        e.printStackTrace();
                    }
                }
            }
        - lang: Node.js
          source: >
            import { Client, ApiController, Environment } from
            '@bandwidth/messaging';

            import * as fs from 'fs';


            const BW_USERNAME = "api-username";

            const BW_PASSWORD = "api-password";

            const BW_ACCOUNT_ID = "12345";

            const mediaId = "abc123.pdf";

            const contentType = "application/octet-stream";

            const cacheControl = "no-cache";

            const contents = Buffer.alloc(8); // Any binary string will work for
            the upload. This includes file contents


            const client = new Client({
              basicAuthUserName: BW_USERNAME,
              basicAuthPassword: BW_PASSWORD,
            });


            const controller = new ApiController(client);


            const uploadMedia = async function() {
              try {
                const response = await controller.uploadMedia(BW_ACCOUNT_ID, mediaId, contents, contentType, cacheControl);
                console.log(response.statusCode)
              } catch (error) {
              console.error(error);
            }};


            uploadMedia();
        - lang: PHP
          source: >
            <?php


            require "vendor/autoload.php";


            api-username = "api-username";

            api-password = "api-pasword";

            12345 = "12345";


            $config = new BandwidthLib\Configuration(
                array(
                    'messagingBasicAuthUserName' => $BW_USERNAME,
                    'messagingBasicAuthPassword' => $BW_PASSWORD,
                )
            );

            $client = new BandwidthLib\BandwidthClient($config);


            $messagingClient = $client->getMessaging()->getClient();


            $mediaFileName = "sample_file_name";

            $mediaFile = "12345"; //Any binary string will work for the upload.
            This includes file contents


            try {
                $messagingClient->uploadMedia($BW_ACCOUNT_ID, $mediaFileName, $mediaFile);
            } catch (BandwidthLib\APIException $e) {
                print_r($e->getResponseCode());
            }
        - lang: Python
          source: >
            from bandwidth.bandwidth_client import BandwidthClient

            from bandwidth.exceptions.api_exception import APIException


            import os


            BW_USERNAME = "api-username"

            BW_PASSWORD = "api-password"

            BW_ACCOUNT_ID = "12345"


            bandwidth_client = BandwidthClient(
                messaging_basic_auth_user_name=BW_USERNAME,
                messaging_basic_auth_password=BW_PASSWORD
            )

            messaging_client = bandwidth_client.messaging_client.client


            media_file_name = 'sample_file_name'

            media_file = b'12345' #Any binary string will work for the upload.
            This includes file contents


            try:
                messaging_client.upload_media(BW_ACCOUNT_ID, media_file_name, media_file)
            except APIException as e:
                print(e.response_code)
        - lang: Ruby
          source: |
            require 'bandwidth-sdk'

            Bandwidth.configure do |config|
              config.username = 'api-username'
              config.password = 'api-password'
            end

            api_instance = Bandwidth::MediaApi.new
            account_id = '12345'
            media_id = '14762070468292kw2fuqty55yp2b2/0/bw.png'
            body = '12345'
            opts = {
              content_type: 'application/octet-stream',
              cache_control: 'no-cache'
            }

            begin
              api_instance.upload_media(account_id, media_id, body, opts)
            rescue Bandwidth::ApiError => e
              p "Error when calling MediaApi->upload_media: #{e}"
            end
    delete:
      summary: Delete Media
      description: |-
        Deletes a media file from Bandwidth API server. Make sure you don't have
        any application scripts still using the media before you delete.

        If you accidentally delete a media file you can immediately upload a new
        file with the same name.
      operationId: deleteMedia
      tags:
        - Media
      parameters:
        - $ref: '#/components/parameters/accountId'
        - $ref: '#/components/parameters/mediaId'
      responses:
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/messagingBadRequestError'
        '401':
          $ref: '#/components/responses/messagingUnauthorizedError'
        '403':
          $ref: '#/components/responses/messagingForbiddenError'
        '404':
          $ref: '#/components/responses/messagingNotFoundError'
        '406':
          $ref: '#/components/responses/messagingNotAcceptableError'
        '415':
          $ref: '#/components/responses/messagingInvalidMediaTypeError'
        '429':
          $ref: '#/components/responses/messagingTooManyRequestsError'
        '500':
          $ref: '#/components/responses/messagingInternalServerError'
      x-codeSamples:
        - lang: cURL
          source: >
            curl
            'https://messaging.bandwidth.com/api/v2/users/12345/media/media-id-123'
            \
                -X DELETE \
                -H 'Authorization: Basic dXNlcm5hbWU6cGFzc3dvcmQ='
        - lang: C#
          source: |
            using System;
            using System.Threading.Tasks;
            using Bandwidth.Standard;
            using Bandwidth.Standard.Exceptions;
            using Bandwidth.Standard.Messaging.Models;

            class Program
            {
                static async Task Main(string[] args)
                {
                    var username = "api-username";
                    var password = "api-pasword";
                    var accountId = "12345";

                    var client = new BandwidthClient.Builder()
                        .MessagingBasicAuthCredentials(username, password)
                        .Build();

                    var mediaId = "media-id-123";

                    try
                    {
                        await client.Messaging.APIController.DeleteMediaAsync(accountId, mediaId);
                    }
                    catch (ApiException e)
                    {
                        Console.WriteLine(e.Message);
                    }
                }
            }
        - lang: Java
          source: |
            import com.bandwidth.sdk.ApiClient;
            import com.bandwidth.sdk.ApiException;
            import com.bandwidth.sdk.Configuration;
            import com.bandwidth.sdk.auth.*;
            import com.bandwidth.sdk.models.*;
            import com.bandwidth.sdk.api.MediaApi;

            public class Sample {
                public static void main(String[] args) {
                    ApiClient defaultClient = Configuration.getDefaultApiClient();        

                    // Configure HTTP basic authorization: Basic
                    HttpBasicAuth Basic = (HttpBasicAuth) defaultClient.getAuthentication("Basic");
                    Basic.setUsername("YOUR USERNAME");
                    Basic.setPassword("YOUR PASSWORD");

                    MediaApi apiInstance = new MediaApi(defaultClient);
                    String accountId = "9900000"; // String | Your Bandwidth Account ID.
                    String mediaId = "14762070468292kw2fuqty55yp2b2/0/bw.png"; // String | Media ID to retrieve.
                    try {
                        File result = apiInstance.getMedia(accountId, mediaId);
                        System.out.println(result);
                    } catch (ApiException e) {
                        System.err.println("Exception when calling MediaApi#getMedia");
                        System.err.println("Status code: " + e.getCode());
                        System.err.println("Reason: " + e.getResponseBody());
                        System.err.println("Response headers: " + e.getResponseHeaders());
                        e.printStackTrace();
                    }
                }
            }
        - lang: Node.js
          source: |
            import { Client, ApiController } from '@bandwidth/messaging';

            const BW_USERNAME = "api-username";
            const BW_PASSWORD = "api-password";
            const BW_ACCOUNT_ID = "12345";
            const mediaId = 'abc12345-6def-abc1-2345-6defabc123451.mp3';

            const client = new Client({
              basicAuthUserName: BW_USERNAME,
              basicAuthPassword: BW_PASSWORD
            });

            const controller = new ApiController(client);

            const deleteMedia = async function() {
              try {
                const response = await controller.deleteMedia(BW_ACCOUNT_ID, mediaId);
                console.log(response.statusCode);
              } catch (error) {
              console.error(error);
            }};

            deleteMedia();
        - lang: PHP
          source: |
            <?php
              
            require "vendor/autoload.php";

            api-username = "api-username";
            api-password = "api-pasword";
            12345 = "12345";
            1234-asdf = "1234-asdf";
            +15554443333 = "+15554443333";
            +15553334444 = "+15553334444";

            $config = new BandwidthLib\Configuration(
                array(
                    'messagingBasicAuthUserName' => $BW_USERNAME,
                    'messagingBasicAuthPassword' => $BW_PASSWORD,
                )
            );
            $client = new BandwidthLib\BandwidthClient($config);

            $messagingClient = $client->getMessaging()->getClient();

            $mediaId = "m-1234";

            try {
                $messagingClient->deleteMedia($BW_ACCOUNT_ID, $mediaId);
            } catch (BandwidthLib\APIException $e) {
                print_r($e->getResponseCode());
            }
        - lang: Python
          source: |
            from bandwidth.bandwidth_client import BandwidthClient
            from bandwidth.exceptions.api_exception import APIException

            import os

            BW_USERNAME = "api-username"
            BW_PASSWORD = "api-password"
            BW_ACCOUNT_ID = "12345"

            bandwidth_client = BandwidthClient(
                messaging_basic_auth_user_name=BW_USERNAME,
                messaging_basic_auth_password=BW_PASSWORD
            )
            messaging_client = bandwidth_client.messaging_client.client

            media_id = "m-1234"

            try:
                messaging_client.delete_media(BW_ACCOUNT_ID, media_id)
            except APIException as e:
                print(e.response_code)
        - lang: Ruby
          source: |
            require 'bandwidth-sdk'

            Bandwidth.configure do |config|
              config.username = 'api-username'
              config.password = 'api-password'
            end

            api_instance = Bandwidth::MediaApi.new
            account_id = '12345'
            media_id = '14762070468292kw2fuqty55yp2b2/0/bw.png'

            begin
              api_instance.delete_media(account_id, media_id)
            rescue Bandwidth::ApiError => e
              p "Error when calling MediaApi->delete_media: #{e}"
            end
  /users/{accountId}/messages:
    get:
      summary: List Messages
      description: Returns a list of messages based on query parameters.
      operationId: listMessages
      tags:
        - Messages
      parameters:
        - $ref: '#/components/parameters/accountId'
        - $ref: '#/components/parameters/messageId'
        - $ref: '#/components/parameters/sourceTn'
        - $ref: '#/components/parameters/destinationTn'
        - $ref: '#/components/parameters/messageStatus'
        - $ref: '#/components/parameters/messageDirection'
        - $ref: '#/components/parameters/carrierName'
        - $ref: '#/components/parameters/messageType'
        - $ref: '#/components/parameters/errorCode'
        - $ref: '#/components/parameters/fromDateTime'
        - $ref: '#/components/parameters/toDateTime'
        - $ref: '#/components/parameters/campaignId'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/pageToken'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/limitTotalCount'
      responses:
        '200':
          $ref: '#/components/responses/listMessagesResponse'
        '400':
          $ref: '#/components/responses/messagingBadRequestError'
        '401':
          $ref: '#/components/responses/messagingUnauthorizedError'
        '403':
          $ref: '#/components/responses/messagingForbiddenError'
        '404':
          $ref: '#/components/responses/messagingNotFoundError'
        '415':
          $ref: '#/components/responses/messagingInvalidMediaTypeError'
        '429':
          $ref: '#/components/responses/messagingTooManyRequestsError'
        '500':
          $ref: '#/components/responses/messagingInternalServerError'
      x-codeSamples:
        - lang: cURL
          source: >
            curl
            'https://messaging.bandwidth.com/api/v2/users/12345/messages?sourceTn=+15554443333'
            \
                -H 'Authorization: Basic dXNlcm5hbWU6cGFzc3dvcmQ='
        - lang: C#
          source: |
            using System;
            using System.Threading.Tasks;
            using Bandwidth.Standard;
            using Bandwidth.Standard.Exceptions;
            using Bandwidth.Standard.Messaging.Models;

            class Program
            {
                static async Task Main(string[] args)
                {
                    var username = "api-username";
                    var password = "api-pasword";
                    var accountId = "12345";
                    var bandwidthNumber = "+15554443333";

                    var client = new BandwidthClient.Builder()
                        .MessagingBasicAuthCredentials(username, password)
                        .Build();

                    try
                    {
                        var response = await client.Messaging.APIController.GetMessagesAsync(accountId, sourceTn: bandwidthNumber);
                        Console.WriteLine(response.Data);
                    }
                    catch (ApiException e)
                    {
                        Console.WriteLine(e.Message);
                    }
                }
            }
        - lang: Java
          source: |
            import com.bandwidth.sdk.ApiClient;
            import com.bandwidth.sdk.ApiException;
            import com.bandwidth.sdk.Configuration;
            import com.bandwidth.sdk.auth.*;
            import com.bandwidth.sdk.models.*;
            import com.bandwidth.sdk.api.MessagesApi;

            public class Sample {
                public static void main(String[] args) {
                    ApiClient defaultClient = Configuration.getDefaultApiClient();        

                    // Configure HTTP basic authorization: Basic
                    HttpBasicAuth Basic = (HttpBasicAuth) defaultClient.getAuthentication("Basic");
                    Basic.setUsername("YOUR USERNAME");
                    Basic.setPassword("YOUR PASSWORD");

                    MessagesApi apiInstance = new MessagesApi(defaultClient);
                    String accountId = "9900000"; // String | Your Bandwidth Account ID.
                    String messageId = "9e0df4ca-b18d-40d7-a59f-82fcdf5ae8e6"; // String | The ID of the message to search for. Special characters need to be encoded using URL encoding. Message IDs could come in different formats, e.g., 9e0df4ca-b18d-40d7-a59f-82fcdf5ae8e6 and 1589228074636lm4k2je7j7jklbn2 are valid message ID formats. Note that you must include at least one query parameter.
                    String sourceTn = "%2B15554443333"; // String | The phone number that sent the message. Accepted values are: a single full phone number a comma separated list of full phone numbers (maximum of 10) or a single partial phone number (minimum of 5 characters e.g. '%2B1919').
                    String destinationTn = "%2B15554443333"; // String | The phone number that received the message. Accepted values are: a single full phone number a comma separated list of full phone numbers (maximum of 10) or a single partial phone number (minimum of 5 characters e.g. '%2B1919').
                    MessageStatusEnum messageStatus = MessageStatusEnum.fromValue("RECEIVED"); // MessageStatusEnum | The status of the message. One of RECEIVED QUEUED SENDING SENT FAILED DELIVERED ACCEPTED UNDELIVERED.
                    ListMessageDirectionEnum messageDirection = ListMessageDirectionEnum.fromValue("INBOUND"); // ListMessageDirectionEnum | The direction of the message. One of INBOUND OUTBOUND.
                    String carrierName = "Verizon"; // String | The name of the carrier used for this message. Possible values include but are not limited to Verizon and TMobile. Special characters need to be encoded using URL encoding (i.e. AT&T should be passed as AT%26T).
                    MessageTypeEnum messageType = MessageTypeEnum.fromValue("sms"); // MessageTypeEnum | The type of message. Either sms or mms.
                    Integer errorCode = 9902; // Integer | The error code of the message.
                    String fromDateTime = "2022-09-14T18:20:16.000Z"; // String | The start of the date range to search in ISO 8601 format. Uses the message receive time. The date range to search in is currently 14 days.
                    String toDateTime = "2022-09-14T18:20:16.000Z"; // String | The end of the date range to search in ISO 8601 format. Uses the message receive time. The date range to search in is currently 14 days.
                    String campaignId = "CJEUMDK"; // String | The campaign ID of the message.
                    String sort = "sourceTn:desc"; // String | The field and direction to sort by combined with a colon. Direction is either asc or desc.
                    String pageToken = "gdEewhcJLQRB5"; // String | A base64 encoded value used for pagination of results.
                    Integer limit = 50; // Integer | The maximum records requested in search result. Default 100. The sum of limit and after cannot be more than 10000.
                    Boolean limitTotalCount = true; // Boolean | When set to true, the response's totalCount field will have a maximum value of 10,000. When set to false, or excluded, this will give an accurate totalCount of all messages that match the provided filters. If you are experiencing latency, try using this parameter to limit your results.
                    try {
                        MessagesList result = apiInstance.listMessages(accountId, messageId, sourceTn, destinationTn, messageStatus, messageDirection, carrierName, messageType, errorCode, fromDateTime, toDateTime, campaignId, sort, pageToken, limit, limitTotalCount);
                        System.out.println(result);
                    } catch (ApiException e) {
                        System.err.println("Exception when calling MessagesApi#listMessages");
                        System.err.println("Status code: " + e.getCode());
                        System.err.println("Reason: " + e.getResponseBody());
                        System.err.println("Response headers: " + e.getResponseHeaders());
                        e.printStackTrace();
                    }
                }
            }
        - lang: Node.js
          source: |
            import { Client, ApiController } from '@bandwidth/messaging';

            const BW_USERNAME = "api-username";
            const BW_PASSWORD = "api-password";
            const BW_ACCOUNT_ID = "12345";
            const messageId = "1589228074636lm4k2je7j7jklbn2";

            const client = new Client({
              basicAuthUserName: BW_USERNAME,
              basicAuthPassword: BW_PASSWORD
            });

            const controller = new ApiController(client);

            const getMessage = async function() {
              try {
                const response = await controller.getMessages(BW_ACCOUNT_ID, messageId);
                console.log(response.body)
              } catch (error) {
              console.error(error);
            }};

            getMessage();
        - lang: PHP
          source: |
            <?php

            require "vendor/autoload.php";

            api-username = "api-username";
            api-password = "api-pasword";
            12345 = "12345";
            +15554443333 = "+15554443333";

            $config = new BandwidthLib\Configuration(
                array(
                    'messagingBasicAuthUserName' => $BW_USERNAME,
                    'messagingBasicAuthPassword' => $BW_PASSWORD,
                )
            );
            $client = new BandwidthLib\BandwidthClient($config);

            $messagingClient = $client->getMessaging()->getClient();

            try {
                $response = $messagingClient->getMessages($BW_ACCOUNT_ID, $sourceTn = $BW_NUMBER);
                print_r($response->getResult()->totalCount);
            } catch (BandwidthLib\APIException $e) {
                print_r($e->getResponseCode());
            }
        - lang: Python
          source: |
            from bandwidth.bandwidth_client import BandwidthClient
            from bandwidth.exceptions.api_exception import APIException

            import os

            BW_USERNAME = "api-username"
            BW_PASSWORD = "api-password"
            BW_ACCOUNT_ID = "12345"

            bandwidth_client = BandwidthClient(
                messaging_basic_auth_user_name=BW_USERNAME,
                messaging_basic_auth_password=BW_PASSWORD
            )
            messaging_client = bandwidth_client.messaging_client.client

            source_tn = "+15554443333"

            try:
                response = messaging_client.get_messages(BW_ACCOUNT_ID, source_tn=source_tn)
                print(response.body.total_count)
            except APIException as e:
                print(e.response_code)
        - lang: Ruby
          source: |
            require 'bandwidth-sdk'

            Bandwidth.configure do |config|
              config.username = 'api-username'
              config.password = 'api-password'
            end

            api_instance = Bandwidth::MessagesApi.new
            account_id = '12345'

            begin
              result = api_instance.list_messages(account_id)
              p result.total_count
            rescue Bandwidth::ApiError => e
              p "Error when calling MessagesApi->list_messages:  #{e}"
            end
    post:
      summary: Create Message
      description: >-
        Endpoint for sending text messages and picture messages using V2
        messaging.
      operationId: createMessage
      tags:
        - Messages
      parameters:
        - $ref: '#/components/parameters/accountId'
      requestBody:
        $ref: '#/components/requestBodies/createMessageRequest'
      responses:
        '202':
          $ref: '#/components/responses/createMessageResponse'
        '400':
          $ref: '#/components/responses/createMessageBadRequestError'
        '401':
          $ref: '#/components/responses/messagingUnauthorizedError'
        '403':
          $ref: '#/components/responses/messagingForbiddenError'
        '404':
          $ref: '#/components/responses/messagingNotFoundError'
        '406':
          $ref: '#/components/responses/messagingNotAcceptableError'
        '415':
          $ref: '#/components/responses/messagingInvalidMediaTypeError'
        '429':
          $ref: '#/components/responses/messagingTooManyRequestsError'
        '500':
          $ref: '#/components/responses/messagingInternalServerError'
      callbacks:
        inboundCallback:
          $ref: '#/components/callbacks/inboundCallback'
        statusCallback:
          $ref: '#/components/callbacks/statusCallback'
      x-codeSamples:
        - lang: cURL
          source: |
            curl 'https://messaging.bandwidth.com/api/v2/users/12345/messages' \
                -X POST \
                -H 'Authorization: Basic dXNlcm5hbWU6cGFzc3dvcmQ=' \
                -H 'Content-Type: application/json' \
                -d '{
                    "applicationId": "$BW_ACCOUNT_ID",
                    "to": [
                        "+15553334444",
                        "+15552223333"
                    ],
                    "from": "+15554443333",
                    "text": "Hello World!",
                    "media": [
                        "https://dev.bandwidth.com/images/bandwidth-logo.png",
                        "https://dev.bandwidth.com/images/github_logo.png"
                    ],
                    "tag": "custom string",
                    "priority": "default"
                }'
        - lang: C#
          source: |
            using System;
            using System.Collections.Generic;
            using System.Threading.Tasks;
            using Bandwidth.Standard;
            using Bandwidth.Standard.Exceptions;
            using Bandwidth.Standard.Messaging.Models;

            class Program
            {
                static async Task Main(string[] args)
                {
                    var username = "api-username";
                    var password = "api-pasword";
                    var accountId = "12345";
                    var applicationId = "1234-asdf";
                    var bandwidthNumber = "+15554443333";
                    var userNumber = "+15553334444";

                    var client = new BandwidthClient.Builder()
                        .MessagingBasicAuthCredentials(username, password)
                        .Build();

                    var request = new MessageRequest()
                    {
                        ApplicationId = applicationId,
                        To = new List<string> { userNumber },
                        From = bandwidthNumber,
                        Text = "Hello world"
                    };

                    try
                    {
                        var response = await client.Messaging.APIController.CreateMessageAsync(accountId, request);
                        Console.WriteLine(response.Data);
                    }
                    catch (ApiException e)
                    {
                        Console.WriteLine(e.Message);
                    }
                }
            }
        - lang: Java
          source: |
            import com.bandwidth.sdk.ApiClient;
            import com.bandwidth.sdk.ApiException;
            import com.bandwidth.sdk.Configuration;
            import com.bandwidth.sdk.auth.*;
            import com.bandwidth.sdk.models.*;
            import com.bandwidth.sdk.api.MessagesApi;

            public class Sample {
                public static void main(String[] args) {
                    ApiClient defaultClient = Configuration.getDefaultApiClient();
                    // Configure HTTP basic authorization: Basic
                    HttpBasicAuth Basic = (HttpBasicAuth) defaultClient.getAuthentication("Basic");
                    Basic.setUsername("YOUR USERNAME");
                    Basic.setPassword("YOUR PASSWORD");

                    MessagesApi apiInstance = new MessagesApi(defaultClient);
                    String accountId = "9900000"; // String | Your Bandwidth Account ID.
                    MessageRequest messageRequest = new MessageRequest(); // MessageRequest |
                    try {
                        Message result = apiInstance.createMessage(accountId, messageRequest);
                        System.out.println(result);
                    } catch (ApiException e) {
                        System.err.println("Exception when calling MessagesApi#createMessage");
                        System.err.println("Status code: " + e.getCode());
                        System.err.println("Reason: " + e.getResponseBody());
                        System.err.println("Response headers: " + e.getResponseHeaders());
                        e.printStackTrace();
                    }
                }
            }
        - lang: Node.js
          source: |
            import { Client, ApiController } from '@bandwidth/messaging';

            const BW_USERNAME = "api-username";
            const BW_PASSWORD = "api-password";
            const BW_ACCOUNT_ID = "12345";
            const BW_MESSAGING_APPLICATION_ID = "1234-asdf";
            const BW_NUMBER = "+15554443333";
            const USER_NUMBER = "+15553334444";

            const client = new Client({
              basicAuthUserName: BW_USERNAME,
              basicAuthPassword: BW_PASSWORD
            });

            const controller = new ApiController(client);

            const accountId = BW_ACCOUNT_ID;

            const sendMessage = async function() {
              try {
                const response = await controller.createMessage(accountId, {
                    applicationId: BW_MESSAGING_APPLICATION_ID,
                    to: [USER_NUMBER],
                    from: BW_NUMBER,
                    text: 'The quick brown fox jumps over the lazy dog.'
                });
                console.log(response.body);
              } catch (error) {
              console.error(error);
            }};

            sendMessage();
        - lang: PHP
          source: |
            <?php

            require "vendor/autoload.php";

            api-username = "api-username";
            api-password = "api-pasword";
            12345 = "12345";
            1234-asdf = "1234-asdf";
            +15554443333 = "+15554443333";
            +15553334444 = "+15553334444";

            $config = new BandwidthLib\Configuration(
                array(
                    'messagingBasicAuthUserName' => $BW_USERNAME,
                    'messagingBasicAuthPassword' => $BW_PASSWORD,
                )
            );
            $client = new BandwidthLib\BandwidthClient($config);

            $messagingClient = $client->getMessaging()->getClient();

            $body = new BandwidthLib\Messaging\Models\MessageRequest();
            $body->from = $BW_NUMBER;
            $body->to = array($USER_NUMBER);
            $body->applicationId = $BW_MESSAGING_APPLICATION_ID;
            $body->text = "Hello world";

            try {
                $response = $messagingClient->createMessage($BW_ACCOUNT_ID, $body);
                print_r($response->getResult()->id);
            } catch (BandwidthLib\APIException $e) {
                print_r($e->getResponseCode());
            }
        - lang: Python
          source: >
            from bandwidth.bandwidth_client import BandwidthClient

            from bandwidth.messaging.models.message_request import
            MessageRequest

            from bandwidth.exceptions.api_exception import APIException


            import os


            BW_USERNAME = "api-username"

            BW_PASSWORD = "api-password"

            BW_ACCOUNT_ID = "12345"

            BW_MESSAGING_APPLICATION_ID = "1234-asdf"

            BW_NUMBER = "+15554443333"

            USER_NUMBER = "+15553334444"


            bandwidth_client = BandwidthClient(
                messaging_basic_auth_user_name=BW_USERNAME,
                messaging_basic_auth_password=BW_PASSWORD
            )

            messaging_client = bandwidth_client.messaging_client.client


            body = MessageRequest()

            body.application_id = BW_MESSAGING_APPLICATION_ID

            body.to = [USER_NUMBER]

            body.mfrom = BW_NUMBER

            body.text = "Hello world"

            try:
                response = messaging_client.create_message(BW_ACCOUNT_ID, body)
                print(response.body.id)
            except APIException as e:
                print(e.response_code)
        - lang: Ruby
          source: |
            require 'bandwidth-sdk'

            Bandwidth.configure do |config|
              config.username = 'api-username'
              config.password = 'api-password'
            end

            api_instance = Bandwidth::MessagesApi.new
            account_id = '12345'
            message_request = Bandwidth::MessageRequest.new(
              {
                application_id: '1234-asdf',
                to: ['+15553334444'],
                from: '+15554443333',
                text: 'Hello world!'
              }
            )

            begin
              result = api_instance.create_message(account_id, message_request)
              p "messageId: #{result.id}"
            rescue Bandwidth::ApiError => e
              p "Error when calling MessagesApi->create_message: #{e}"
            end
components:
  parameters:
    accountId:
      in: path
      name: accountId
      required: true
      schema:
        type: string
      description: Your Bandwidth Account ID.
      example: '9900000'
    mediaId:
      in: path
      name: mediaId
      required: true
      description: Media ID to retrieve.
      example: 14762070468292kw2fuqty55yp2b2/0/bw.png
      schema:
        type: string
    contentType:
      in: header
      name: Content-Type
      style: simple
      explode: false
      description: The media type of the entity-body.
      example: audio/wav
      schema:
        type: string
    cacheControl:
      in: header
      name: Cache-Control
      style: simple
      explode: false
      description: >-
        General-header field is used to specify directives that MUST be obeyed
        by all caching mechanisms along the request/response chain.
      example: no-cache
      schema:
        type: string
    continuationToken:
      in: header
      name: Continuation-Token
      description: Continuation token used to retrieve subsequent media.
      example: >-
        1XEi2tsFtLo1JbtLwETnM1ZJ+PqAa8w6ENvC5QKvwyrCDYII663Gy5M4s40owR1tjkuWUif6qbWvFtQJR5/ipqbUnfAqL254LKNlPy6tATCzioKSuHuOqgzloDkSwRtX0LtcL2otHS69hK343m+SjdL+vlj71tT39
      schema:
        type: string
    messageId:
      in: query
      name: messageId
      required: false
      description: >-
        The ID of the message to search for. Special characters need to be
        encoded using URL encoding. Message IDs could come in different formats,
        e.g., 9e0df4ca-b18d-40d7-a59f-82fcdf5ae8e6 and
        1589228074636lm4k2je7j7jklbn2 are valid message ID formats. Note that
        you must include at least one query parameter.
      example: 9e0df4ca-b18d-40d7-a59f-82fcdf5ae8e6
      schema:
        type: string
    sourceTn:
      in: query
      name: sourceTn
      required: false
      description: >-
        The phone number that sent the message. Accepted values are: a single
        full phone number a comma separated list of full phone numbers (maximum
        of 10) or a single partial phone number (minimum of 5 characters e.g.
        '%2B1919').
      example: '%2B15554443333'
      schema:
        type: string
    destinationTn:
      in: query
      name: destinationTn
      required: false
      description: >-
        The phone number that received the message. Accepted values are: a
        single full phone number a comma separated list of full phone numbers
        (maximum of 10) or a single partial phone number (minimum of 5
        characters e.g. '%2B1919').
      example: '%2B15554443333'
      schema:
        type: string
    messageStatus:
      in: query
      name: messageStatus
      required: false
      description: >-
        The status of the message. One of RECEIVED QUEUED SENDING SENT FAILED
        DELIVERED ACCEPTED UNDELIVERED.
      schema:
        $ref: '#/components/schemas/messageStatusEnum'
    messageDirection:
      in: query
      name: messageDirection
      required: false
      description: The direction of the message. One of INBOUND OUTBOUND.
      schema:
        $ref: '#/components/schemas/listMessageDirectionEnum'
    carrierName:
      in: query
      name: carrierName
      required: false
      description: >-
        The name of the carrier used for this message. Possible values include
        but are not limited to Verizon and TMobile. Special characters need to
        be encoded using URL encoding (i.e. AT&T should be passed as AT%26T).
      example: Verizon
      schema:
        type: string
    messageType:
      in: query
      name: messageType
      required: false
      description: The type of message. Either sms or mms.
      schema:
        $ref: '#/components/schemas/messageTypeEnum'
    errorCode:
      in: query
      name: errorCode
      required: false
      description: The error code of the message.
      example: 9902
      schema:
        type: integer
    fromDateTime:
      in: query
      name: fromDateTime
      required: false
      description: >-
        The start of the date range to search in ISO 8601 format. Uses the
        message receive time. The date range to search in is currently 14 days.
      example: 2022-09-14T18:20:16.000Z
      schema:
        type: string
    toDateTime:
      in: query
      name: toDateTime
      required: false
      description: >-
        The end of the date range to search in ISO 8601 format. Uses the message
        receive time. The date range to search in is currently 14 days.
      example: 2022-09-14T18:20:16.000Z
      schema:
        type: string
    campaignId:
      in: query
      name: campaignId
      required: false
      description: The campaign ID of the message.
      example: CJEUMDK
      schema:
        type: string
    sort:
      in: query
      name: sort
      required: false
      description: >-
        The field and direction to sort by combined with a colon. Direction is
        either asc or desc.
      example: sourceTn:desc
      schema:
        type: string
    pageToken:
      in: query
      name: pageToken
      required: false
      description: A base64 encoded value used for pagination of results.
      example: gdEewhcJLQRB5
      schema:
        type: string
    limit:
      in: query
      name: limit
      required: false
      description: >-
        The maximum records requested in search result. Default 100. The sum of
        limit and after cannot be more than 10000.
      schema:
        type: integer
      example: 50
    limitTotalCount:
      in: query
      name: limitTotalCount
      required: false
      description: >-
        When set to true, the response's totalCount field will have a maximum
        value of 10,000. When set to false, or excluded, this will give an
        accurate totalCount of all messages that match the provided filters. If
        you are experiencing latency, try using this parameter to limit your
        results.
      example: true
      schema:
        type: boolean
  schemas:
    priorityEnum:
      type: string
      description: |-
        The priority specified by the user.

        Not supported on MMS.
      enum:
        - default
        - high
      example: default
    messageStatusEnum:
      type: string
      description: >-
        The status of the message. One of RECEIVED QUEUED SENDING SENT FAILED
        DELIVERED ACCEPTED UNDELIVERED.
      enum:
        - RECEIVED
        - QUEUED
        - SENDING
        - SENT
        - FAILED
        - DELIVERED
        - ACCEPTED
        - UNDELIVERED
      example: RECEIVED
    listMessageDirectionEnum:
      type: string
      description: The direction of the message. One of INBOUND OUTBOUND.
      enum:
        - INBOUND
        - OUTBOUND
    messageDirectionEnum:
      type: string
      description: The direction of the message. One of in out.
      enum:
        - in
        - out
    messageTypeEnum:
      type: string
      description: The type of message. Either SMS or MMS.
      enum:
        - sms
        - mms
      example: sms
    fieldError:
      type: object
      properties:
        fieldName:
          type: string
          description: The name of the field that contains the error
          example: from
        description:
          type: string
          description: The error associated with the field
          example: >-
            '+invalid' must be replaced with a valid E164 formatted telephone
            number
    messagesList:
      title: MessagesList
      type: object
      properties:
        totalCount:
          type: integer
          description: >-
            The total number of messages matched by the search. When the request
            has limitTotalCount set to true this value is limited to 10,000.
          example: 100
        pageInfo:
          $ref: '#/components/schemas/pageInfo'
        messages:
          type: array
          items:
            $ref: '#/components/schemas/listMessageItem'
    listMessageItem:
      title: listMessageItem
      type: object
      properties:
        messageId:
          type: string
          description: The message id
          example: 1589228074636lm4k2je7j7jklbn2
        accountId:
          type: string
          description: The account id associated with this message.
          example: '9900000'
        sourceTn:
          type: string
          description: The source phone number of the message.
          example: '+15554443333'
        destinationTn:
          type: string
          description: The recipient phone number of the message.
          example: '+15554442222'
        messageStatus:
          $ref: '#/components/schemas/messageStatusEnum'
        messageDirection:
          $ref: '#/components/schemas/listMessageDirectionEnum'
        messageType:
          $ref: '#/components/schemas/messageTypeEnum'
        segmentCount:
          type: integer
          description: The number of segments the message was sent as.
          example: 1
        errorCode:
          type: integer
          description: The numeric error code of the message.
          example: 9902
        receiveTime:
          type: string
          format: date-time
          description: The ISO 8601 datetime of the message.
          example: 2020-04-07T14:03:07.000Z
        carrierName:
          type: string
          nullable: true
          description: >-
            The name of the carrier. Not currently supported for MMS coming
            soon.
          example: other
        messageSize:
          type: integer
          description: The size of the message including message content and headers.
          nullable: true
          example: 27
        messageLength:
          type: integer
          description: The length of the message content.
          example: 18
        attachmentCount:
          type: integer
          description: The number of attachments the message has.
          nullable: true
          example: 1
        recipientCount:
          type: integer
          description: The number of recipients the message has.
          nullable: true
          example: 1
        campaignClass:
          type: string
          description: The campaign class of the message if it has one.
          nullable: true
          example: T
        campaignId:
          type: string
          description: The campaign ID of the message if it has one.
          nullable: true
          example: CJEUMDK
    pageInfo:
      title: PageInfo
      type: object
      properties:
        prevPage:
          type: string
          description: The link to the previous page for pagination.
          example: >-
            https://messaging.bandwidth.com/api/v2/users/accountId/messages?messageStatus=DLR_EXPIRED&nextPage=DLAPE902
        nextPage:
          type: string
          description: The link to the next page for pagination.
          example: >-
            https://messaging.bandwidth.com/api/v2/users/accountId/messages?messageStatus=DLR_EXPIRED&prevPage=GL83PD3C
        prevPageToken:
          type: string
          description: The isolated pagination token for the previous page.
          example: DLAPE902
        nextPageToken:
          type: string
          description: The isolated pagination token for the next page.
          example: GL83PD3C
    messagingRequestError:
      title: MessagingRequestError
      type: object
      properties:
        type:
          type: string
        description:
          type: string
      required:
        - type
        - description
    createMessageRequestError:
      title: CreateMessageRequestError
      type: object
      properties:
        type:
          type: string
        description:
          type: string
        fieldErrors:
          type: array
          items:
            $ref: '#/components/schemas/fieldError'
      required:
        - type
        - description
    media:
      title: Media
      type: object
      properties:
        content:
          type: string
        contentLength:
          type: integer
        mediaName:
          type: string
    tag:
      title: Tag
      type: object
      properties:
        key:
          type: string
        value:
          type: string
    deferredResult:
      title: DeferredResult
      type: object
      properties:
        result:
          type: object
        setOrExpired:
          type: boolean
    message:
      title: Message
      type: object
      properties:
        id:
          type: string
          description: The id of the message.
          example: 1589228074636lm4k2je7j7jklbn2
        owner:
          type: string
          description: The Bandwidth phone number associated with the message.
          example: '+15554443333'
        applicationId:
          type: string
          description: The application ID associated with the message.
          example: 93de2206-9669-4e07-948d-329f4b722ee2
        time:
          type: string
          format: date-time
          description: The datetime stamp of the message in ISO 8601
          example: 2022-09-14T18:20:16.000Z
        segmentCount:
          type: integer
          description: >-
            The number of segments the original message from the user is broken
            into before sending over to carrier networks.
          example: 2
        direction:
          $ref: '#/components/schemas/messageDirectionEnum'
        to:
          uniqueItems: true
          type: array
          items:
            type: string
          description: The phone number recipients of the message.
          example:
            - '+15552223333'
        from:
          type: string
          description: The phone number the message was sent from.
          example: '+15553332222'
        media:
          uniqueItems: true
          type: array
          items:
            type: string
          description: >-
            The list of media URLs sent in the message. Including a `filename`
            field in the `Content-Disposition` header of the media linked with a
            URL will set the displayed file name. This is a best practice to
            ensure that your media has a readable file name.
          example:
            - https://dev.bandwidth.com/images/bandwidth-logo.png
        text:
          type: string
          description: The contents of the message.
          example: Hello world
        tag:
          type: string
          description: The custom string set by the user.
          example: custom tag
        priority:
          $ref: '#/components/schemas/priorityEnum'
        expiration:
          type: string
          format: date-time
          description: The expiration date-time set by the user.
          example: '2021-02-01T11:29:18-05:00'
    messageRequest:
      title: MessageRequest
      type: object
      required:
        - applicationId
        - to
        - from
      properties:
        applicationId:
          type: string
          description: >-
            The ID of the Application your from number is associated with in the
            Bandwidth Phone Number Dashboard.
          example: 93de2206-9669-4e07-948d-329f4b722ee2
        to:
          uniqueItems: true
          type: array
          description: The phone number(s) the message should be sent to in E164 format.
          example:
            - '+15554443333'
            - '+15552223333'
          items:
            type: string
        from:
          type: string
          description: >-
            One of your telephone numbers the message should come from in E164
            format.
          example: '+15551113333'
        text:
          type: string
          description: The contents of the text message. Must be 2048 characters or less.
          maxLength: 2048
          example: Hello world
        media:
          type: array
          items:
            type: string
            format: uri
            maxLength: 4096
          description: >-
            A list of URLs to include as media attachments as part of the
            message.

            Each URL can be at most 4096 characters.
          example:
            - https://dev.bandwidth.com/images/bandwidth-logo.png
            - https://dev.bandwidth.com/images/github_logo.png
        tag:
          type: string
          description: >-
            A custom string that will be included in callback events of the
            message. Max 1024 characters.
          example: custom string
        priority:
          $ref: '#/components/schemas/priorityEnum'
        expiration:
          type: string
          format: date-time
          description: >-
            A string with the date/time value that the message will
            automatically expire by. This must be a valid RFC-3339 value, e.g.,
            2021-03-14T01:59:26Z or 2021-03-13T20:59:26-05:00. Must be a
            date-time in the future.

            Not supported on MMS.
          example: '2021-02-01T11:29:18-05:00'
    inboundMessageCallback:
      description: Inbound Message Callback
      type: object
      properties:
        time:
          type: string
          format: date-time
          example: 2016-09-14T18:20:16.000Z
        type:
          type: string
          example: message-received
        to:
          type: string
          example: '+15552223333'
        description:
          type: string
          example: Incoming message received
        message:
          $ref: '#/components/schemas/inboundMessageCallbackMessage'
      required:
        - time
        - type
        - to
        - description
        - message
    inboundMessageCallbackMessage:
      description: Inbound Message Callback Message Schema
      type: object
      properties:
        id:
          type: string
          example: 1661365814859loidf7mcwd4qacn7
        owner:
          type: string
          example: '+15553332222'
        applicationId:
          type: string
          example: 93de2206-9669-4e07-948d-329f4b722ee2
        time:
          type: string
          format: date-time
          example: 2016-09-14T18:20:16.000Z
        segmentCount:
          type: integer
          example: 1
        direction:
          $ref: '#/components/schemas/messageDirectionEnum'
        to:
          uniqueItems: true
          type: array
          items:
            type: string
          example:
            - '+15552223333'
        from:
          type: string
          example: '+15553332222'
        text:
          type: string
          example: Hello world
        tag:
          type: string
          example: custom string
        media:
          type: array
          items:
            type: string
            format: uri
          example:
            - https://dev.bandwidth.com/images/bandwidth-logo.png
            - https://dev.bandwidth.com/images/github_logo.png
        priority:
          $ref: '#/components/schemas/priorityEnum'
      required:
        - id
        - owner
        - applicationId
        - time
        - segmentCount
        - direction
        - to
        - from
        - text
    messageSendingCallback:
      type: object
      description: Message Sending Callback
      properties:
        time:
          type: string
          format: date-time
          example: 2016-09-14T18:20:16.000Z
        type:
          type: string
          example: message-sending
        to:
          type: string
          example: '+15552223333'
        description:
          type: string
          example: Message is sending to carrier
        message:
          $ref: '#/components/schemas/messageSendingCallbackMessage'
      required:
        - time
        - type
        - to
        - description
        - message
    messageSendingCallbackMessage:
      description: Message Sending Callback Message Schema
      type: object
      properties:
        id:
          type: string
          example: 1661365814859loidf7mcwd4qacn7
        owner:
          type: string
          example: '+15553332222'
        applicationId:
          type: string
          example: 93de2206-9669-4e07-948d-329f4b722ee2
        time:
          type: string
          format: date-time
          example: 2016-09-14T18:20:16.000Z
        segmentCount:
          type: integer
          example: 1
        direction:
          $ref: '#/components/schemas/messageDirectionEnum'
        to:
          uniqueItems: true
          type: array
          items:
            type: string
          example:
            - '+15552223333'
        from:
          type: string
          example: '+15553332222'
        text:
          type: string
          example: Hello world
        tag:
          type: string
          example: custom string
        media:
          type: array
          items:
            type: string
            format: uri
          example:
            - https://dev.bandwidth.com/images/bandwidth-logo.png
            - https://dev.bandwidth.com/images/github_logo.png
        priority:
          $ref: '#/components/schemas/priorityEnum'
      required:
        - id
        - owner
        - applicationId
        - time
        - segmentCount
        - direction
        - to
        - from
        - text
        - media
        - priority
    messageDeliveredCallback:
      description: Message Delivered Callback
      type: object
      properties:
        time:
          type: string
          format: date-time
          example: 2016-09-14T18:20:16.000Z
        type:
          type: string
          example: message-delivered
        to:
          type: string
          example: '+15552223333'
        description:
          type: string
          example: Message delivered to carrier.
        message:
          $ref: '#/components/schemas/messageDeliveredCallbackMessage'
      required:
        - time
        - type
        - to
        - description
        - message
    messageDeliveredCallbackMessage:
      description: Message Delivered Callback Message Schema
      type: object
      properties:
        id:
          type: string
          example: 1661365814859loidf7mcwd4qacn7
        owner:
          type: string
          example: '+15553332222'
        applicationId:
          type: string
          example: 93de2206-9669-4e07-948d-329f4b722ee2
        time:
          type: string
          format: date-time
          example: 2016-09-14T18:20:16.000Z
        segmentCount:
          type: integer
          example: 1
        direction:
          $ref: '#/components/schemas/messageDirectionEnum'
        to:
          uniqueItems: true
          type: array
          items:
            type: string
          example:
            - '+15552223333'
        from:
          type: string
          example: '+15553332222'
        text:
          type: string
          example: Hello world
        tag:
          type: string
          example: custom string
        media:
          type: array
          items:
            type: string
            format: uri
          example:
            - https://dev.bandwidth.com/images/bandwidth-logo.png
            - https://dev.bandwidth.com/images/github_logo.png
        priority:
          $ref: '#/components/schemas/priorityEnum'
      required:
        - id
        - owner
        - applicationId
        - time
        - segmentCount
        - direction
        - to
        - from
        - text
        - tag
    messageFailedCallback:
      description: Message Failed Callback
      type: object
      properties:
        time:
          type: string
          format: date-time
          example: 2016-09-14T18:20:16.000Z
        type:
          type: string
          example: message-failed
        to:
          type: string
          example: '+15552223333'
        description:
          type: string
          example: rejected-unallocated-from-number
        message:
          $ref: '#/components/schemas/messageFailedCallbackMessage'
        errorCode:
          type: integer
          example: 9902
      required:
        - time
        - type
        - to
        - description
        - message
        - errorCode
    messageFailedCallbackMessage:
      description: Message Failed Callback Message Schema
      type: object
      properties:
        id:
          type: string
          example: 1661365814859loidf7mcwd4qacn7
        owner:
          type: string
          example: '+15553332222'
        applicationId:
          type: string
          example: 93de2206-9669-4e07-948d-329f4b722ee2
        time:
          type: string
          format: date-time
          example: 2016-09-14T18:20:16.000Z
        segmentCount:
          type: integer
          example: 1
        direction:
          $ref: '#/components/schemas/messageDirectionEnum'
        to:
          uniqueItems: true
          type: array
          items:
            type: string
          example:
            - '+15552223333'
        from:
          type: string
          example: '+15553332222'
        text:
          type: string
          example: Hello world
        tag:
          type: string
          example: custom string
        media:
          type: array
          items:
            type: string
            format: uri
          example:
            - https://dev.bandwidth.com/images/bandwidth-logo.png
            - https://dev.bandwidth.com/images/github_logo.png
        priority:
          $ref: '#/components/schemas/priorityEnum'
      required:
        - id
        - owner
        - applicationId
        - time
        - segmentCount
        - direction
        - to
        - from
        - text
        - tag
        - priority
  requestBodies:
    createMessageRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/messageRequest'
      required: true
    uploadMediaRequest:
      content:
        application/json:
          schema:
            type: string
            format: binary
        application/ogg:
          schema:
            type: string
            format: binary
        application/pdf:
          schema:
            type: string
            format: binary
        application/rtf:
          schema:
            type: string
            format: binary
        application/zip:
          schema:
            type: string
            format: binary
        application/x-tar:
          schema:
            type: string
            format: binary
        application/xml:
          schema:
            type: string
            format: binary
        application/gzip:
          schema:
            type: string
            format: binary
        application/x-bzip2:
          schema:
            type: string
            format: binary
        application/x-gzip:
          schema:
            type: string
            format: binary
        application/smil:
          schema:
            type: string
            format: binary
        application/javascript:
          schema:
            type: string
            format: binary
        audio/mp4:
          schema:
            type: string
            format: binary
        audio/mpeg:
          schema:
            type: string
            format: binary
        audio/ogg:
          schema:
            type: string
            format: binary
        audio/flac:
          schema:
            type: string
            format: binary
        audio/webm:
          schema:
            type: string
            format: binary
        audio/wav:
          schema:
            type: string
            format: binary
        audio/amr:
          schema:
            type: string
            format: binary
        audio/3gpp:
          schema:
            type: string
            format: binary
        image/bmp:
          schema:
            type: string
            format: binary
        image/gif:
          schema:
            type: string
            format: binary
        image/jpeg:
          schema:
            type: string
            format: binary
        image/pjpeg:
          schema:
            type: string
            format: binary
        image/png:
          schema:
            type: string
            format: binary
        image/svg+xml:
          schema:
            type: string
            format: binary
        image/tiff:
          schema:
            type: string
            format: binary
        image/webp:
          schema:
            type: string
            format: binary
        image/x-icon:
          schema:
            type: string
            format: binary
        text/css:
          schema:
            type: string
            format: binary
        text/csv:
          schema:
            type: string
            format: binary
        text/calendar:
          schema:
            type: string
            format: binary
        text/plain:
          schema:
            type: string
            format: binary
        text/javascript:
          schema:
            type: string
            format: binary
        text/vcard:
          schema:
            type: string
            format: binary
        text/vnd.wap.wml:
          schema:
            type: string
            format: binary
        text/xml:
          schema:
            type: string
            format: binary
        video/avi:
          schema:
            type: string
            format: binary
        video/mp4:
          schema:
            type: string
            format: binary
        video/mpeg:
          schema:
            type: string
            format: binary
        video/ogg:
          schema:
            type: string
            format: binary
        video/quicktime:
          schema:
            type: string
            format: binary
        video/webm:
          schema:
            type: string
            format: binary
        video/x-ms-wmv:
          schema:
            type: string
            format: binary
      required: true
  responses:
    createMessageResponse:
      description: Accepted
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/message'
    listMessagesResponse:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/messagesList'
    getMediaResponse:
      description: OK
      content:
        application/octet-stream:
          schema:
            type: string
            description: Successful Operation
            format: binary
    listMediaResponse:
      description: OK
      headers:
        Continuation-Token:
          description: Continuation token used to retrieve subsequent media.
          schema:
            type: string
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/media'
    messagingBadRequestError:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/messagingRequestError'
    messagingNotAcceptableError:
      description: Not Acceptable
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/messagingRequestError'
    createMessageBadRequestError:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/createMessageRequestError'
    messagingUnauthorizedError:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/messagingRequestError'
    messagingForbiddenError:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/messagingRequestError'
    messagingNotFoundError:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/messagingRequestError'
    messagingInvalidMediaTypeError:
      description: Unsupported Media Type
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/messagingRequestError'
    messagingTooManyRequestsError:
      description: Too Many Requests
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/messagingRequestError'
    messagingInternalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/messagingRequestError'
  callbacks:
    inboundCallback:
      '{inboundCallbackUrl}':
        post:
          requestBody:
            required: true
            description: Inbound Message Callback Payload
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/inboundMessageCallback'
          responses:
            '200':
              description: OK
    statusCallback:
      '{statusCallbackUrl}':
        post:
          requestBody:
            required: true
            description: Status Callback Payload
            content:
              application/json:
                schema:
                  type: object
                  oneOf:
                    - $ref: '#/components/schemas/messageSendingCallback'
                    - $ref: '#/components/schemas/messageDeliveredCallback'
                    - $ref: '#/components/schemas/messageFailedCallback'
          responses:
            '200':
              description: OK
  securitySchemes:
    Basic:
      type: http
      scheme: basic
      description: |-
        Basic authentication is a simple authentication scheme built into the
        HTTP protocol. To use it, send your HTTP requests with an Authorization
        header that contains the word Basic followed by a space and a
        base64-encoded string `username:password`Example: `Authorization: Basic
        ZGVtbZpwQDU1dzByZA==`
security:
  - Basic: []
tags:
  - name: Messages
  - name: Media
